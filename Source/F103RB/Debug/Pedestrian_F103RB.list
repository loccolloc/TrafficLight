
Pedestrian_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080046f8  080046f8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f8  080046f8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000094  08004794  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004794  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106a4  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cb  00000000  00000000  00030761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00033c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e48  00000000  00000000  00034b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133e8  00000000  00000000  0004d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da80  00000000  00000000  00060da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004728  00000000  00000000  000ee870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004608 	.word	0x08004608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004608 	.word	0x08004608

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 f935 	bl	8002408 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000fc 	.word	0x200000fc

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 f905 	bl	8002408 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000fc 	.word	0x200000fc

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000212:	2080      	movs	r0, #128	; 0x80
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i=0; i<70; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b45      	cmp	r3, #69	; 0x45
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    switch (row)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <lcd_put_cur+0x18>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d005      	beq.n	800025c <lcd_put_cur+0x22>
 8000250:	e009      	b.n	8000266 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000258:	603b      	str	r3, [r7, #0]
            break;
 800025a:	e004      	b.n	8000266 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000262:	603b      	str	r3, [r7, #0]
            break;
 8000264:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff6e 	bl	800014c <lcd_send_cmd>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <lcd_init>:


void lcd_init (void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800027c:	2032      	movs	r0, #50	; 0x32
 800027e:	f001 fc81 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000282:	2030      	movs	r0, #48	; 0x30
 8000284:	f7ff ff62 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000288:	2005      	movs	r0, #5
 800028a:	f001 fc7b 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x30);
 800028e:	2030      	movs	r0, #48	; 0x30
 8000290:	f7ff ff5c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000294:	2001      	movs	r0, #1
 8000296:	f001 fc75 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x30);
 800029a:	2030      	movs	r0, #48	; 0x30
 800029c:	f7ff ff56 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002a0:	200a      	movs	r0, #10
 80002a2:	f001 fc6f 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002a6:	2020      	movs	r0, #32
 80002a8:	f7ff ff50 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002ac:	200a      	movs	r0, #10
 80002ae:	f001 fc69 	bl	8001b84 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002b2:	2028      	movs	r0, #40	; 0x28
 80002b4:	f7ff ff4a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f001 fc63 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002be:	2008      	movs	r0, #8
 80002c0:	f7ff ff44 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f001 fc5d 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f001 fc57 	bl	8001b84 <HAL_Delay>
	HAL_Delay(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f001 fc54 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002dc:	2006      	movs	r0, #6
 80002de:	f7ff ff35 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f001 fc4e 	bl	8001b84 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002e8:	200c      	movs	r0, #12
 80002ea:	f7ff ff2f 	bl	800014c <lcd_send_cmd>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b082      	sub	sp, #8
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002fa:	e006      	b.n	800030a <lcd_send_string+0x18>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	607a      	str	r2, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff51 	bl	80001ac <lcd_send_data>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1f4      	bne.n	80002fc <lcd_send_string+0xa>
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <buzzerNoBeep>:

short buzzer_counter;

short pedestrian_led_counter = ONE_SECOND / 4;

void buzzerNoBeep(){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2104      	movs	r1, #4
 8000324:	4802      	ldr	r0, [pc, #8]	; (8000330 <buzzerNoBeep+0x14>)
 8000326:	f001 fefa 	bl	800211e <HAL_GPIO_WritePin>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40011000 	.word	0x40011000

08000334 <resetTrafficLight>:

void resetTrafficLight(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	pState = SLEEP;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <resetTrafficLight+0x5c>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
	ledState[VERTICAL] = GREEN;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <resetTrafficLight+0x60>)
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
	ledState[HORIZONTAL] = RED;
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <resetTrafficLight+0x60>)
 8000346:	2202      	movs	r2, #2
 8000348:	705a      	strb	r2, [r3, #1]
	light_counter[VERTICAL]   = durationGreen * ONE_SECOND;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <resetTrafficLight+0x64>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b29b      	uxth	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	4413      	add	r3, r2
 8000356:	461a      	mov	r2, r3
 8000358:	0091      	lsls	r1, r2, #2
 800035a:	461a      	mov	r2, r3
 800035c:	460b      	mov	r3, r1
 800035e:	4413      	add	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <resetTrafficLight+0x68>)
 8000366:	801a      	strh	r2, [r3, #0]
	light_counter[HORIZONTAL] = durationRed * ONE_SECOND;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <resetTrafficLight+0x6c>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b29b      	uxth	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	4413      	add	r3, r2
 8000374:	461a      	mov	r2, r3
 8000376:	0091      	lsls	r1, r2, #2
 8000378:	461a      	mov	r2, r3
 800037a:	460b      	mov	r3, r1
 800037c:	4413      	add	r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	b29a      	uxth	r2, r3
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <resetTrafficLight+0x68>)
 8000384:	805a      	strh	r2, [r3, #2]
	buzzerNoBeep();
 8000386:	f7ff ffc9 	bl	800031c <buzzerNoBeep>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	200000c0 	.word	0x200000c0
 8000394:	200000b8 	.word	0x200000b8
 8000398:	200000c3 	.word	0x200000c3
 800039c:	200000bc 	.word	0x200000bc
 80003a0:	200000c1 	.word	0x200000c1

080003a4 <displayPLED>:

void toggleLED(void){
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

void displayPLED(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	switch (pState){
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <displayPLED+0x80>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02c      	beq.n	800040a <displayPLED+0x66>
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	dc35      	bgt.n	8000420 <displayPLED+0x7c>
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <displayPLED+0x1a>
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d00b      	beq.n	80003d4 <displayPLED+0x30>
	case ACROSS:
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
		break;
	}
}
 80003bc:	e030      	b.n	8000420 <displayPLED+0x7c>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2101      	movs	r1, #1
 80003c2:	4819      	ldr	r0, [pc, #100]	; (8000428 <displayPLED+0x84>)
 80003c4:	f001 feab 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2102      	movs	r1, #2
 80003cc:	4816      	ldr	r0, [pc, #88]	; (8000428 <displayPLED+0x84>)
 80003ce:	f001 fea6 	bl	800211e <HAL_GPIO_WritePin>
		break;
 80003d2:	e025      	b.n	8000420 <displayPLED+0x7c>
		pedestrian_led_counter--;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <displayPLED+0x88>)
 80003d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003da:	b29b      	uxth	r3, r3
 80003dc:	3b01      	subs	r3, #1
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b21a      	sxth	r2, r3
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <displayPLED+0x88>)
 80003e4:	801a      	strh	r2, [r3, #0]
		if (pedestrian_led_counter <= 0){
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <displayPLED+0x88>)
 80003e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	dc06      	bgt.n	80003fe <displayPLED+0x5a>
			pedestrian_led_counter = ONE_SECOND / 4;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <displayPLED+0x88>)
 80003f2:	2219      	movs	r2, #25
 80003f4:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(PLED_RED_GPIO_Port, PLED_RED_Pin);
 80003f6:	2101      	movs	r1, #1
 80003f8:	480b      	ldr	r0, [pc, #44]	; (8000428 <displayPLED+0x84>)
 80003fa:	f001 fea8 	bl	800214e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	2102      	movs	r1, #2
 8000402:	4809      	ldr	r0, [pc, #36]	; (8000428 <displayPLED+0x84>)
 8000404:	f001 fe8b 	bl	800211e <HAL_GPIO_WritePin>
		break;
 8000408:	e00a      	b.n	8000420 <displayPLED+0x7c>
		HAL_GPIO_WritePin(PLED_RED_GPIO_Port, PLED_RED_Pin, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	2101      	movs	r1, #1
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <displayPLED+0x84>)
 8000410:	f001 fe85 	bl	800211e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PLED_GREEN_GPIO_Port, PLED_GREEN_Pin, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2102      	movs	r1, #2
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <displayPLED+0x84>)
 800041a:	f001 fe80 	bl	800211e <HAL_GPIO_WritePin>
		break;
 800041e:	bf00      	nop
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000c0 	.word	0x200000c0
 8000428:	40011000 	.word	0x40011000
 800042c:	20000000 	.word	0x20000000

08000430 <inputProcessingInit>:

void inputProcessingInit(UART_HandleTypeDef* huart)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	buttonState[SET_BTN] = RELEASED;
 8000438:	4b20      	ldr	r3, [pc, #128]	; (80004bc <inputProcessingInit+0x8c>)
 800043a:	2200      	movs	r2, #0
 800043c:	709a      	strb	r2, [r3, #2]
	buttonState[MOD_BTN] = RELEASED;
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <inputProcessingInit+0x8c>)
 8000440:	2200      	movs	r2, #0
 8000442:	705a      	strb	r2, [r3, #1]
	buttonState[SEL_BTN] = RELEASED;
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <inputProcessingInit+0x8c>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	buttonState[P_BTN] 	 = RELEASED;
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <inputProcessingInit+0x8c>)
 800044c:	2200      	movs	r2, #0
 800044e:	70da      	strb	r2, [r3, #3]
	blinking_counter = 1;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <inputProcessingInit+0x90>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
	increasing_counter = INCREASING_PERIOD;
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <inputProcessingInit+0x94>)
 8000458:	220a      	movs	r2, #10
 800045a:	601a      	str	r2, [r3, #0]

	durationRed = DURATION_RED_DEFAULT;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <inputProcessingInit+0x98>)
 800045e:	220c      	movs	r2, #12
 8000460:	701a      	strb	r2, [r3, #0]
	durationAmber = DURATION_AMBER_DEFAULT;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <inputProcessingInit+0x9c>)
 8000464:	2203      	movs	r2, #3
 8000466:	701a      	strb	r2, [r3, #0]
	durationGreen = DURATION_GREEN_DEFAULT;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <inputProcessingInit+0xa0>)
 800046a:	2209      	movs	r2, #9
 800046c:	701a      	strb	r2, [r3, #0]

	light_counter[VERTICAL]   = durationGreen * ONE_SECOND;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <inputProcessingInit+0xa0>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	461a      	mov	r2, r3
 8000476:	0092      	lsls	r2, r2, #2
 8000478:	4413      	add	r3, r2
 800047a:	461a      	mov	r2, r3
 800047c:	0091      	lsls	r1, r2, #2
 800047e:	461a      	mov	r2, r3
 8000480:	460b      	mov	r3, r1
 8000482:	4413      	add	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <inputProcessingInit+0xa4>)
 800048a:	801a      	strh	r2, [r3, #0]
	light_counter[HORIZONTAL] = durationRed * ONE_SECOND;
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <inputProcessingInit+0x98>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	4413      	add	r3, r2
 8000498:	461a      	mov	r2, r3
 800049a:	0091      	lsls	r1, r2, #2
 800049c:	461a      	mov	r2, r3
 800049e:	460b      	mov	r3, r1
 80004a0:	4413      	add	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <inputProcessingInit+0xa4>)
 80004a8:	805a      	strh	r2, [r3, #2]

	runState = NORMAL_MODE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <inputProcessingInit+0xa8>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
	resetTrafficLight();
 80004b0:	f7ff ff40 	bl	8000334 <resetTrafficLight>

}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000b0 	.word	0x200000b0
 80004c0:	200000d8 	.word	0x200000d8
 80004c4:	200000dc 	.word	0x200000dc
 80004c8:	200000c1 	.word	0x200000c1
 80004cc:	200000c2 	.word	0x200000c2
 80004d0:	200000c3 	.word	0x200000c3
 80004d4:	200000bc 	.word	0x200000bc
 80004d8:	200000b4 	.word	0x200000b4

080004dc <increaseOne>:

void increaseOne(uint8_t* duration){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	(*duration) = (*duration) + 1 > 99 ? 0 : (*duration) + 1;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b62      	cmp	r3, #98	; 0x62
 80004ea:	d804      	bhi.n	80004f6 <increaseOne+0x1a>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	e000      	b.n	80004f8 <increaseOne+0x1c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	701a      	strb	r2, [r3, #0]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <modifyingValue>:

void modifyingValue(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	switch(runState){
 800050c:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <modifyingValue+0xf8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	2b03      	cmp	r3, #3
 8000514:	d871      	bhi.n	80005fa <modifyingValue+0xf2>
 8000516:	a201      	add	r2, pc, #4	; (adr r2, 800051c <modifyingValue+0x14>)
 8000518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051c:	080005f9 	.word	0x080005f9
 8000520:	0800052d 	.word	0x0800052d
 8000524:	08000571 	.word	0x08000571
 8000528:	080005b5 	.word	0x080005b5
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		increaseOne(&adjust_duRed);
 800052c:	4835      	ldr	r0, [pc, #212]	; (8000604 <modifyingValue+0xfc>)
 800052e:	f7ff ffd5 	bl	80004dc <increaseOne>

		lcd_clear();
 8000532:	f7ff fe6b 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 8000536:	2100      	movs	r1, #0
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff fe7e 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 800053e:	4b32      	ldr	r3, [pc, #200]	; (8000608 <modifyingValue+0x100>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4931      	ldr	r1, [pc, #196]	; (800060c <modifyingValue+0x104>)
 8000546:	4832      	ldr	r0, [pc, #200]	; (8000610 <modifyingValue+0x108>)
 8000548:	f003 fcd0 	bl	8003eec <siprintf>
		lcd_send_string(message);
 800054c:	4830      	ldr	r0, [pc, #192]	; (8000610 <modifyingValue+0x108>)
 800054e:	f7ff fed0 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000552:	2100      	movs	r1, #0
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff fe70 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <modifyingValue+0xfc>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	492c      	ldr	r1, [pc, #176]	; (8000614 <modifyingValue+0x10c>)
 8000562:	482b      	ldr	r0, [pc, #172]	; (8000610 <modifyingValue+0x108>)
 8000564:	f003 fcc2 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000568:	4829      	ldr	r0, [pc, #164]	; (8000610 <modifyingValue+0x108>)
 800056a:	f7ff fec2 	bl	80002f2 <lcd_send_string>

		break;
 800056e:	e044      	b.n	80005fa <modifyingValue+0xf2>
	case MODIFY_DURATION_AMBER_MODE:
		increaseOne(&adjust_duAmber);
 8000570:	4829      	ldr	r0, [pc, #164]	; (8000618 <modifyingValue+0x110>)
 8000572:	f7ff ffb3 	bl	80004dc <increaseOne>

		lcd_clear();
 8000576:	f7ff fe49 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe5c 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <modifyingValue+0x114>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4920      	ldr	r1, [pc, #128]	; (800060c <modifyingValue+0x104>)
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <modifyingValue+0x108>)
 800058c:	f003 fcae 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000590:	481f      	ldr	r0, [pc, #124]	; (8000610 <modifyingValue+0x108>)
 8000592:	f7ff feae 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000596:	2100      	movs	r1, #0
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff fe4e 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <modifyingValue+0x110>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	491e      	ldr	r1, [pc, #120]	; (8000620 <modifyingValue+0x118>)
 80005a6:	481a      	ldr	r0, [pc, #104]	; (8000610 <modifyingValue+0x108>)
 80005a8:	f003 fca0 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <modifyingValue+0x108>)
 80005ae:	f7ff fea0 	bl	80002f2 <lcd_send_string>

		break;
 80005b2:	e022      	b.n	80005fa <modifyingValue+0xf2>
	case MODIFY_DURATION_GREEN_MODE:
		increaseOne(&adjust_duGreen);
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <modifyingValue+0x11c>)
 80005b6:	f7ff ff91 	bl	80004dc <increaseOne>

		lcd_clear();
 80005ba:	f7ff fe27 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fe3a 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <modifyingValue+0x120>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <modifyingValue+0x104>)
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <modifyingValue+0x108>)
 80005d0:	f003 fc8c 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <modifyingValue+0x108>)
 80005d6:	f7ff fe8c 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe2c 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <modifyingValue+0x11c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4910      	ldr	r1, [pc, #64]	; (800062c <modifyingValue+0x124>)
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <modifyingValue+0x108>)
 80005ec:	f003 fc7e 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <modifyingValue+0x108>)
 80005f2:	f7ff fe7e 	bl	80002f2 <lcd_send_string>
		break;
 80005f6:	e000      	b.n	80005fa <modifyingValue+0xf2>
		break;
 80005f8:	bf00      	nop
	}
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000b4 	.word	0x200000b4
 8000604:	200000c4 	.word	0x200000c4
 8000608:	200000c1 	.word	0x200000c1
 800060c:	08004620 	.word	0x08004620
 8000610:	200000c8 	.word	0x200000c8
 8000614:	08004630 	.word	0x08004630
 8000618:	200000c5 	.word	0x200000c5
 800061c:	200000c2 	.word	0x200000c2
 8000620:	08004640 	.word	0x08004640
 8000624:	200000c6 	.word	0x200000c6
 8000628:	200000c3 	.word	0x200000c3
 800062c:	08004650 	.word	0x08004650

08000630 <changingMode>:
void changingMode(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	//Turn off all LEDs.
	resetAllLED();
 8000634:	f001 f978 	bl	8001928 <resetAllLED>

	//Changing state and initial new value for new mode.
	switch(runState){
 8000638:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <changingMode+0x140>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	2b03      	cmp	r3, #3
 8000640:	f200 8093 	bhi.w	800076a <changingMode+0x13a>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <changingMode+0x1c>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800065d 	.word	0x0800065d
 8000650:	080006b3 	.word	0x080006b3
 8000654:	08000709 	.word	0x08000709
 8000658:	0800075f 	.word	0x0800075f
	case NORMAL_MODE:
		runState = MODIFY_DURATION_RED_MODE;
 800065c:	4b44      	ldr	r3, [pc, #272]	; (8000770 <changingMode+0x140>)
 800065e:	2202      	movs	r2, #2
 8000660:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <changingMode+0x144>)
 8000664:	2232      	movs	r2, #50	; 0x32
 8000666:	601a      	str	r2, [r3, #0]
		adjust_duRed = durationRed;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <changingMode+0x148>)
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	4b43      	ldr	r3, [pc, #268]	; (800077c <changingMode+0x14c>)
 800066e:	701a      	strb	r2, [r3, #0]
		resetTrafficLight();
 8000670:	f7ff fe60 	bl	8000334 <resetTrafficLight>

		lcd_clear();
 8000674:	f7ff fdca 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fddd 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <changingMode+0x148>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	493e      	ldr	r1, [pc, #248]	; (8000780 <changingMode+0x150>)
 8000688:	483e      	ldr	r0, [pc, #248]	; (8000784 <changingMode+0x154>)
 800068a:	f003 fc2f 	bl	8003eec <siprintf>
		lcd_send_string(message);
 800068e:	483d      	ldr	r0, [pc, #244]	; (8000784 <changingMode+0x154>)
 8000690:	f7ff fe2f 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000694:	2100      	movs	r1, #0
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fdcf 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <changingMode+0x14c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4939      	ldr	r1, [pc, #228]	; (8000788 <changingMode+0x158>)
 80006a4:	4837      	ldr	r0, [pc, #220]	; (8000784 <changingMode+0x154>)
 80006a6:	f003 fc21 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80006aa:	4836      	ldr	r0, [pc, #216]	; (8000784 <changingMode+0x154>)
 80006ac:	f7ff fe21 	bl	80002f2 <lcd_send_string>

		break;
 80006b0:	e05b      	b.n	800076a <changingMode+0x13a>
	case MODIFY_DURATION_RED_MODE:
		runState = MODIFY_DURATION_AMBER_MODE;
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <changingMode+0x140>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <changingMode+0x144>)
 80006ba:	2232      	movs	r2, #50	; 0x32
 80006bc:	601a      	str	r2, [r3, #0]
		adjust_duAmber = durationAmber;
 80006be:	4b33      	ldr	r3, [pc, #204]	; (800078c <changingMode+0x15c>)
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <changingMode+0x160>)
 80006c4:	701a      	strb	r2, [r3, #0]
		resetTrafficLight();
 80006c6:	f7ff fe35 	bl	8000334 <resetTrafficLight>

		lcd_clear();
 80006ca:	f7ff fd9f 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fdb2 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <changingMode+0x15c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	4928      	ldr	r1, [pc, #160]	; (8000780 <changingMode+0x150>)
 80006de:	4829      	ldr	r0, [pc, #164]	; (8000784 <changingMode+0x154>)
 80006e0:	f003 fc04 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80006e4:	4827      	ldr	r0, [pc, #156]	; (8000784 <changingMode+0x154>)
 80006e6:	f7ff fe04 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fda4 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <changingMode+0x160>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4926      	ldr	r1, [pc, #152]	; (8000794 <changingMode+0x164>)
 80006fa:	4822      	ldr	r0, [pc, #136]	; (8000784 <changingMode+0x154>)
 80006fc:	f003 fbf6 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <changingMode+0x154>)
 8000702:	f7ff fdf6 	bl	80002f2 <lcd_send_string>

		break;
 8000706:	e030      	b.n	800076a <changingMode+0x13a>
	case MODIFY_DURATION_AMBER_MODE:
		runState = MODIFY_DURATION_GREEN_MODE;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <changingMode+0x140>)
 800070a:	2204      	movs	r2, #4
 800070c:	701a      	strb	r2, [r3, #0]
		blinking_counter = HALF_SECOND;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <changingMode+0x144>)
 8000710:	2232      	movs	r2, #50	; 0x32
 8000712:	601a      	str	r2, [r3, #0]
		adjust_duGreen = durationGreen;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <changingMode+0x168>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <changingMode+0x16c>)
 800071a:	701a      	strb	r2, [r3, #0]
		resetTrafficLight();
 800071c:	f7ff fe0a 	bl	8000334 <resetTrafficLight>

		lcd_clear();
 8000720:	f7ff fd74 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fd87 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <changingMode+0x168>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4913      	ldr	r1, [pc, #76]	; (8000780 <changingMode+0x150>)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <changingMode+0x154>)
 8000736:	f003 fbd9 	bl	8003eec <siprintf>
		lcd_send_string(message);
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <changingMode+0x154>)
 800073c:	f7ff fdd9 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fd79 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <changingMode+0x16c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4914      	ldr	r1, [pc, #80]	; (80007a0 <changingMode+0x170>)
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <changingMode+0x154>)
 8000752:	f003 fbcb 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <changingMode+0x154>)
 8000758:	f7ff fdcb 	bl	80002f2 <lcd_send_string>

		break;
 800075c:	e005      	b.n	800076a <changingMode+0x13a>
	case MODIFY_DURATION_GREEN_MODE:
		runState = NORMAL_MODE;
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <changingMode+0x140>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
		resetTrafficLight();
 8000764:	f7ff fde6 	bl	8000334 <resetTrafficLight>
		break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000b4 	.word	0x200000b4
 8000774:	200000d8 	.word	0x200000d8
 8000778:	200000c1 	.word	0x200000c1
 800077c:	200000c4 	.word	0x200000c4
 8000780:	08004620 	.word	0x08004620
 8000784:	200000c8 	.word	0x200000c8
 8000788:	08004630 	.word	0x08004630
 800078c:	200000c2 	.word	0x200000c2
 8000790:	200000c5 	.word	0x200000c5
 8000794:	08004640 	.word	0x08004640
 8000798:	200000c3 	.word	0x200000c3
 800079c:	200000c6 	.word	0x200000c6
 80007a0:	08004650 	.word	0x08004650

080007a4 <setValue>:
void setValue(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	switch(runState){
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <setValue+0xfc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d874      	bhi.n	800089c <setValue+0xf8>
 80007b2:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <setValue+0x14>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	0800089b 	.word	0x0800089b
 80007bc:	080007c9 	.word	0x080007c9
 80007c0:	0800080f 	.word	0x0800080f
 80007c4:	08000855 	.word	0x08000855
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		durationRed = adjust_duRed;
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <setValue+0x100>)
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <setValue+0x104>)
 80007ce:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 80007d0:	f7ff fd1c 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fd2f 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationRed);
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <setValue+0x104>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4932      	ldr	r1, [pc, #200]	; (80008ac <setValue+0x108>)
 80007e4:	4832      	ldr	r0, [pc, #200]	; (80008b0 <setValue+0x10c>)
 80007e6:	f003 fb81 	bl	8003eec <siprintf>
		lcd_send_string(message);
 80007ea:	4831      	ldr	r0, [pc, #196]	; (80008b0 <setValue+0x10c>)
 80007ec:	f7ff fd81 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fd21 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_RED: %ds", adjust_duRed);
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <setValue+0x100>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	492d      	ldr	r1, [pc, #180]	; (80008b4 <setValue+0x110>)
 8000800:	482b      	ldr	r0, [pc, #172]	; (80008b0 <setValue+0x10c>)
 8000802:	f003 fb73 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000806:	482a      	ldr	r0, [pc, #168]	; (80008b0 <setValue+0x10c>)
 8000808:	f7ff fd73 	bl	80002f2 <lcd_send_string>

		break;
 800080c:	e046      	b.n	800089c <setValue+0xf8>
	case MODIFY_DURATION_AMBER_MODE:
		durationAmber = adjust_duAmber;
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <setValue+0x114>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <setValue+0x118>)
 8000814:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 8000816:	f7ff fcf9 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fd0c 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationAmber);
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <setValue+0x118>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4920      	ldr	r1, [pc, #128]	; (80008ac <setValue+0x108>)
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <setValue+0x10c>)
 800082c:	f003 fb5e 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000830:	481f      	ldr	r0, [pc, #124]	; (80008b0 <setValue+0x10c>)
 8000832:	f7ff fd5e 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fcfe 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_AMBER: %ds", adjust_duAmber);
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <setValue+0x114>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	491e      	ldr	r1, [pc, #120]	; (80008c0 <setValue+0x11c>)
 8000846:	481a      	ldr	r0, [pc, #104]	; (80008b0 <setValue+0x10c>)
 8000848:	f003 fb50 	bl	8003eec <siprintf>
		lcd_send_string(message);
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <setValue+0x10c>)
 800084e:	f7ff fd50 	bl	80002f2 <lcd_send_string>

		break;
 8000852:	e023      	b.n	800089c <setValue+0xf8>
	case MODIFY_DURATION_GREEN_MODE:
		durationGreen = adjust_duGreen;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <setValue+0x120>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <setValue+0x124>)
 800085a:	701a      	strb	r2, [r3, #0]

		lcd_clear();
 800085c:	f7ff fcd6 	bl	800020c <lcd_clear>
		lcd_put_cur(0, 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fce9 	bl	800023a <lcd_put_cur>
		sprintf(message, "CUR_VALUE: %ds", durationGreen);
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <setValue+0x124>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	490f      	ldr	r1, [pc, #60]	; (80008ac <setValue+0x108>)
 8000870:	480f      	ldr	r0, [pc, #60]	; (80008b0 <setValue+0x10c>)
 8000872:	f003 fb3b 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <setValue+0x10c>)
 8000878:	f7ff fd3b 	bl	80002f2 <lcd_send_string>
		lcd_put_cur(1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fcdb 	bl	800023a <lcd_put_cur>
		sprintf(message, "MOD_GREEN: %ds", adjust_duGreen);
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <setValue+0x120>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4910      	ldr	r1, [pc, #64]	; (80008cc <setValue+0x128>)
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <setValue+0x10c>)
 800088e:	f003 fb2d 	bl	8003eec <siprintf>
		lcd_send_string(message);
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <setValue+0x10c>)
 8000894:	f7ff fd2d 	bl	80002f2 <lcd_send_string>

		break;
 8000898:	e000      	b.n	800089c <setValue+0xf8>
		break;
 800089a:	bf00      	nop
	}
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	200000c4 	.word	0x200000c4
 80008a8:	200000c1 	.word	0x200000c1
 80008ac:	08004620 	.word	0x08004620
 80008b0:	200000c8 	.word	0x200000c8
 80008b4:	08004630 	.word	0x08004630
 80008b8:	200000c5 	.word	0x200000c5
 80008bc:	200000c2 	.word	0x200000c2
 80008c0:	08004640 	.word	0x08004640
 80008c4:	200000c6 	.word	0x200000c6
 80008c8:	200000c3 	.word	0x200000c3
 80008cc:	08004650 	.word	0x08004650

080008d0 <handlePedestrianPressedEvent>:
void handlePedestrianPressedEvent(){
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	if (runState != NORMAL_MODE) return;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <handlePedestrianPressedEvent+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d127      	bne.n	800092c <handlePedestrianPressedEvent+0x5c>
	switch(pState){
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <handlePedestrianPressedEvent+0x70>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d025      	beq.n	8000930 <handlePedestrianPressedEvent+0x60>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	dc1d      	bgt.n	8000924 <handlePedestrianPressedEvent+0x54>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <handlePedestrianPressedEvent+0x22>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d021      	beq.n	8000934 <handlePedestrianPressedEvent+0x64>
 80008f0:	e018      	b.n	8000924 <handlePedestrianPressedEvent+0x54>
	case SLEEP:
		if (ledState[VERTICAL] == GREEN || ledState[VERTICAL] == AMBER
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <handlePedestrianPressedEvent+0x74>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00c      	beq.n	8000914 <handlePedestrianPressedEvent+0x44>
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <handlePedestrianPressedEvent+0x74>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d008      	beq.n	8000914 <handlePedestrianPressedEvent+0x44>
				|| (ledState[VERTICAL] == RED && light_counter[VERTICAL] < 8 * ONE_SECOND)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <handlePedestrianPressedEvent+0x74>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d108      	bne.n	800091c <handlePedestrianPressedEvent+0x4c>
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <handlePedestrianPressedEvent+0x78>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000912:	d203      	bcs.n	800091c <handlePedestrianPressedEvent+0x4c>
		) {
			pState = WAIT;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <handlePedestrianPressedEvent+0x70>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
		} else {
			pState = ACROSS;
		}
		break;
 800091a:	e00c      	b.n	8000936 <handlePedestrianPressedEvent+0x66>
			pState = ACROSS;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <handlePedestrianPressedEvent+0x70>)
 800091e:	2202      	movs	r2, #2
 8000920:	701a      	strb	r2, [r3, #0]
		break;
 8000922:	e008      	b.n	8000936 <handlePedestrianPressedEvent+0x66>
	case WAIT:
		break;
	case ACROSS:
		break;
	default:
		pState = SLEEP;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <handlePedestrianPressedEvent+0x70>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e004      	b.n	8000936 <handlePedestrianPressedEvent+0x66>
	if (runState != NORMAL_MODE) return;
 800092c:	bf00      	nop
 800092e:	e002      	b.n	8000936 <handlePedestrianPressedEvent+0x66>
		break;
 8000930:	bf00      	nop
 8000932:	e000      	b.n	8000936 <handlePedestrianPressedEvent+0x66>
		break;
 8000934:	bf00      	nop
	}
}
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200000b4 	.word	0x200000b4
 8000940:	200000c0 	.word	0x200000c0
 8000944:	200000b8 	.word	0x200000b8
 8000948:	200000bc 	.word	0x200000bc

0800094c <inputProcessingFSM>:

//This is abstract function. Use for those function below.
void inputProcessingFSM(void (*processing) (void), const short index){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
	switch(buttonState[index]){
 8000958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <inputProcessingFSM+0xac>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d032      	beq.n	80009ca <inputProcessingFSM+0x7e>
 8000964:	2b02      	cmp	r3, #2
 8000966:	dc43      	bgt.n	80009f0 <inputProcessingFSM+0xa4>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <inputProcessingFSM+0x26>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d010      	beq.n	8000992 <inputProcessingFSM+0x46>
		if (!isButtonPressedOneSec(index)){
			buttonState[index] = RELEASED;
		}
		break;
	}
}
 8000970:	e03e      	b.n	80009f0 <inputProcessingFSM+0xa4>
		if (isButtonPressed(index)){
 8000972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fb2a 	bl	8000fd0 <isButtonPressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d031      	beq.n	80009e6 <inputProcessingFSM+0x9a>
			buttonState[index] = PRESSED;
 8000982:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <inputProcessingFSM+0xac>)
 8000988:	2101      	movs	r1, #1
 800098a:	54d1      	strb	r1, [r2, r3]
			(*processing)();
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4798      	blx	r3
		break;
 8000990:	e029      	b.n	80009e6 <inputProcessingFSM+0x9a>
		if (!isButtonPressed(index)){
 8000992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fb1a 	bl	8000fd0 <isButtonPressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d105      	bne.n	80009ae <inputProcessingFSM+0x62>
			buttonState[index] = RELEASED;
 80009a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <inputProcessingFSM+0xac>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	54d1      	strb	r1, [r2, r3]
		break;
 80009ac:	e01d      	b.n	80009ea <inputProcessingFSM+0x9e>
		} else if (isButtonPressedOneSec(index)){
 80009ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fb22 	bl	8000ffc <isButtonPressedOneSec>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d015      	beq.n	80009ea <inputProcessingFSM+0x9e>
			buttonState[index] = PRESSED_MORE_THAN_ONE_SECOND;
 80009be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009c2:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <inputProcessingFSM+0xac>)
 80009c4:	2102      	movs	r1, #2
 80009c6:	54d1      	strb	r1, [r2, r3]
		break;
 80009c8:	e00f      	b.n	80009ea <inputProcessingFSM+0x9e>
		if (!isButtonPressedOneSec(index)){
 80009ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fb14 	bl	8000ffc <isButtonPressedOneSec>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d109      	bne.n	80009ee <inputProcessingFSM+0xa2>
			buttonState[index] = RELEASED;
 80009da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <inputProcessingFSM+0xac>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	54d1      	strb	r1, [r2, r3]
		break;
 80009e4:	e003      	b.n	80009ee <inputProcessingFSM+0xa2>
		break;
 80009e6:	bf00      	nop
 80009e8:	e002      	b.n	80009f0 <inputProcessingFSM+0xa4>
		break;
 80009ea:	bf00      	nop
 80009ec:	e000      	b.n	80009f0 <inputProcessingFSM+0xa4>
		break;
 80009ee:	bf00      	nop
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000b0 	.word	0x200000b0

080009fc <handleSetValueButton>:
void handleSetValueButton(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	buttonReading(SET_BTN);
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 fa75 	bl	8000ef0 <buttonReading>
	inputProcessingFSM(setValue, SET_BTN);
 8000a06:	2102      	movs	r1, #2
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <handleSetValueButton+0x18>)
 8000a0a:	f7ff ff9f 	bl	800094c <inputProcessingFSM>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	080007a5 	.word	0x080007a5

08000a18 <handleModifyButton>:
void handleModifyButton(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	buttonReading(MOD_BTN);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fa67 	bl	8000ef0 <buttonReading>
	inputProcessingFSM(modifyingValue, MOD_BTN);
 8000a22:	2101      	movs	r1, #1
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <handleModifyButton+0x44>)
 8000a26:	f7ff ff91 	bl	800094c <inputProcessingFSM>
	//Handle when button hold more than one second
	//increase `adjusting value` after INCREASING_PERIOD ms
	if (buttonState[MOD_BTN] == PRESSED_MORE_THAN_ONE_SECOND) {
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <handleModifyButton+0x48>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d10e      	bne.n	8000a50 <handleModifyButton+0x38>
		increasing_counter--;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <handleModifyButton+0x4c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <handleModifyButton+0x4c>)
 8000a3a:	6013      	str	r3, [r2, #0]
		if (increasing_counter <= 0) {
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <handleModifyButton+0x4c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dc08      	bgt.n	8000a56 <handleModifyButton+0x3e>
			increasing_counter = INCREASING_PERIOD;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <handleModifyButton+0x4c>)
 8000a46:	220a      	movs	r2, #10
 8000a48:	601a      	str	r2, [r3, #0]
			modifyingValue();
 8000a4a:	f7ff fd5d 	bl	8000508 <modifyingValue>
		}
	} else {
		increasing_counter = INCREASING_PERIOD;
	}
}
 8000a4e:	e002      	b.n	8000a56 <handleModifyButton+0x3e>
		increasing_counter = INCREASING_PERIOD;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <handleModifyButton+0x4c>)
 8000a52:	220a      	movs	r2, #10
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08000509 	.word	0x08000509
 8000a60:	200000b0 	.word	0x200000b0
 8000a64:	200000dc 	.word	0x200000dc

08000a68 <handleSelectModeButton>:
void handleSelectModeButton(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	buttonReading(SEL_BTN);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fa3f 	bl	8000ef0 <buttonReading>
	inputProcessingFSM(changingMode, SEL_BTN);
 8000a72:	2100      	movs	r1, #0
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <handleSelectModeButton+0x18>)
 8000a76:	f7ff ff69 	bl	800094c <inputProcessingFSM>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08000631 	.word	0x08000631

08000a84 <handlePedestrianButton>:

void handlePedestrianButton(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	buttonReading(P_BTN);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 fa31 	bl	8000ef0 <buttonReading>
	//.inputProcessingFSM(toggleLED, P_BTN);
	inputProcessingFSM(handlePedestrianPressedEvent, P_BTN);
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <handlePedestrianButton+0x18>)
 8000a92:	f7ff ff5b 	bl	800094c <inputProcessingFSM>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	080008d1 	.word	0x080008d1

08000aa0 <setCounterForBuzzer>:


uint16_t setCounterForBuzzer(){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
	uint8_t counter = light_counter[VERTICAL] / ONE_SECOND;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <setCounterForBuzzer+0x40>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <setCounterForBuzzer+0x44>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	095b      	lsrs	r3, r3, #5
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if (counter <= 3){
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d801      	bhi.n	8000ac0 <setCounterForBuzzer+0x20>
		return ONE_SECOND / 20;
 8000abc:	2305      	movs	r3, #5
 8000abe:	e00a      	b.n	8000ad6 <setCounterForBuzzer+0x36>
	}
	else if (counter <= 6){
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d801      	bhi.n	8000aca <setCounterForBuzzer+0x2a>
		return ONE_SECOND / 10;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	e005      	b.n	8000ad6 <setCounterForBuzzer+0x36>
	}
	else if (counter <= 12){
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d801      	bhi.n	8000ad4 <setCounterForBuzzer+0x34>
		return ONE_SECOND / 5;
 8000ad0:	2314      	movs	r3, #20
 8000ad2:	e000      	b.n	8000ad6 <setCounterForBuzzer+0x36>
	}
	else {
		return ONE_SECOND / 2;
 8000ad4:	2332      	movs	r3, #50	; 0x32
	}

}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	200000bc 	.word	0x200000bc
 8000ae4:	51eb851f 	.word	0x51eb851f

08000ae8 <displayingDuration>:

void displayingDuration(uint8_t index){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	if (light_counter[index] % ONE_SECOND != 0 || light_counter[index] == 0)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <displayingDuration+0xb8>)
 8000af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <displayingDuration+0xbc>)
 8000afc:	fba2 1203 	umull	r1, r2, r2, r3
 8000b00:	0952      	lsrs	r2, r2, #5
 8000b02:	2164      	movs	r1, #100	; 0x64
 8000b04:	fb01 f202 	mul.w	r2, r1, r2
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d143      	bne.n	8000b98 <displayingDuration+0xb0>
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <displayingDuration+0xb8>)
 8000b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d03d      	beq.n	8000b98 <displayingDuration+0xb0>
		return;

	char* orientation;
	if (index == VERTICAL) orientation = "V";
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <displayingDuration+0x40>
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <displayingDuration+0xc0>)
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e001      	b.n	8000b2c <displayingDuration+0x44>
	else orientation = "H";
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <displayingDuration+0xc4>)
 8000b2a:	617b      	str	r3, [r7, #20]

	char* led_state_name;
	switch(ledState[index]){
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <displayingDuration+0xc8>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d008      	beq.n	8000b48 <displayingDuration+0x60>
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc0c      	bgt.n	8000b54 <displayingDuration+0x6c>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d007      	beq.n	8000b4e <displayingDuration+0x66>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d108      	bne.n	8000b54 <displayingDuration+0x6c>
	case RED:
		led_state_name = "RED";
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <displayingDuration+0xcc>)
 8000b44:	613b      	str	r3, [r7, #16]
		break;
 8000b46:	e005      	b.n	8000b54 <displayingDuration+0x6c>
	case AMBER:
		led_state_name = "AMBER";
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <displayingDuration+0xd0>)
 8000b4a:	613b      	str	r3, [r7, #16]
		break;
 8000b4c:	e002      	b.n	8000b54 <displayingDuration+0x6c>
	case GREEN:
		led_state_name = "GREEN";
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <displayingDuration+0xd4>)
 8000b50:	613b      	str	r3, [r7, #16]
		break;
 8000b52:	bf00      	nop
	}

	uint16_t numberDisplay = (light_counter[index] - 1) / ONE_SECOND;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <displayingDuration+0xb8>)
 8000b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <displayingDuration+0xbc>)
 8000b60:	fb82 1203 	smull	r1, r2, r2, r3
 8000b64:	1152      	asrs	r2, r2, #5
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	81fb      	strh	r3, [r7, #14]

	if (index == 0) lcd_clear();
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <displayingDuration+0x8e>
 8000b72:	f7ff fb4b 	bl	800020c <lcd_clear>
	lcd_put_cur(index, 0);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb5d 	bl	800023a <lcd_put_cur>
	sprintf(message, "%s-%s: %ds", orientation, led_state_name, numberDisplay);
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <displayingDuration+0xd8>)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <displayingDuration+0xdc>)
 8000b8c:	f003 f9ae 	bl	8003eec <siprintf>
	lcd_send_string(message);
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <displayingDuration+0xdc>)
 8000b92:	f7ff fbae 	bl	80002f2 <lcd_send_string>
 8000b96:	e000      	b.n	8000b9a <displayingDuration+0xb2>
		return;
 8000b98:	bf00      	nop
}
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000bc 	.word	0x200000bc
 8000ba4:	51eb851f 	.word	0x51eb851f
 8000ba8:	08004660 	.word	0x08004660
 8000bac:	08004664 	.word	0x08004664
 8000bb0:	200000b8 	.word	0x200000b8
 8000bb4:	08004668 	.word	0x08004668
 8000bb8:	0800466c 	.word	0x0800466c
 8000bbc:	08004674 	.word	0x08004674
 8000bc0:	0800467c 	.word	0x0800467c
 8000bc4:	200000c8 	.word	0x200000c8

08000bc8 <trafficLightFSM>:


void trafficLightFSM(const short index){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	// Display duration via UART.
	displayingDuration(index);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff86 	bl	8000ae8 <displayingDuration>
	light_counter[index]--;
 8000bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be0:	4a45      	ldr	r2, [pc, #276]	; (8000cf8 <trafficLightFSM+0x130>)
 8000be2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000be6:	3a01      	subs	r2, #1
 8000be8:	b291      	uxth	r1, r2
 8000bea:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <trafficLightFSM+0x130>)
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	switch (ledState[index]){
 8000bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf4:	4a41      	ldr	r2, [pc, #260]	; (8000cfc <trafficLightFSM+0x134>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d02a      	beq.n	8000c52 <trafficLightFSM+0x8a>
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	dc77      	bgt.n	8000cf0 <trafficLightFSM+0x128>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d04b      	beq.n	8000c9c <trafficLightFSM+0xd4>
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d173      	bne.n	8000cf0 <trafficLightFSM+0x128>
	case RED:
		//Display only Red LED.
		WritePinLED(index, RED);
 8000c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 feb2 	bl	8001978 <WritePinLED>
		//After amount of time, it will switch to Green.
		if (light_counter[index] <= 0) {
 8000c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <trafficLightFSM+0x130>)
 8000c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d161      	bne.n	8000ce6 <trafficLightFSM+0x11e>
			light_counter[index] = durationGreen * ONE_SECOND;
 8000c22:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <trafficLightFSM+0x138>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	0089      	lsls	r1, r1, #2
 8000c30:	440a      	add	r2, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	0088      	lsls	r0, r1, #2
 8000c36:	4611      	mov	r1, r2
 8000c38:	4602      	mov	r2, r0
 8000c3a:	440a      	add	r2, r1
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	b291      	uxth	r1, r2
 8000c40:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <trafficLightFSM+0x130>)
 8000c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = GREEN;
 8000c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4a:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <trafficLightFSM+0x134>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	54d1      	strb	r1, [r2, r3]
		}
		break;
 8000c50:	e049      	b.n	8000ce6 <trafficLightFSM+0x11e>
	case AMBER:
		//Display only Amber LED.
		WritePinLED(index, AMBER);
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	2103      	movs	r1, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fe8d 	bl	8001978 <WritePinLED>
		//After amount of time, it will switch to Red.
		if (light_counter[index] <= 0) {
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <trafficLightFSM+0x130>)
 8000c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d13e      	bne.n	8000cea <trafficLightFSM+0x122>
			light_counter[index] = durationRed * ONE_SECOND;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <trafficLightFSM+0x13c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	4611      	mov	r1, r2
 8000c78:	0089      	lsls	r1, r1, #2
 8000c7a:	440a      	add	r2, r1
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	0088      	lsls	r0, r1, #2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4602      	mov	r2, r0
 8000c84:	440a      	add	r2, r1
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	b291      	uxth	r1, r2
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <trafficLightFSM+0x130>)
 8000c8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = RED;
 8000c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <trafficLightFSM+0x134>)
 8000c96:	2102      	movs	r1, #2
 8000c98:	54d1      	strb	r1, [r2, r3]
		}

		break;
 8000c9a:	e026      	b.n	8000cea <trafficLightFSM+0x122>
	case GREEN:
		//Display only Green LED.
		WritePinLED(index, GREEN);
 8000c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fe68 	bl	8001978 <WritePinLED>
		//After amount of time, it will switch to Amber.
		if (light_counter[index] <= 0) {
 8000ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <trafficLightFSM+0x130>)
 8000cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d11b      	bne.n	8000cee <trafficLightFSM+0x126>
			light_counter[index] = durationAmber * ONE_SECOND;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <trafficLightFSM+0x140>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	0089      	lsls	r1, r1, #2
 8000cc4:	440a      	add	r2, r1
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	0088      	lsls	r0, r1, #2
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4602      	mov	r2, r0
 8000cce:	440a      	add	r2, r1
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	b291      	uxth	r1, r2
 8000cd4:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <trafficLightFSM+0x130>)
 8000cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ledState[index] = AMBER;
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <trafficLightFSM+0x134>)
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	54d1      	strb	r1, [r2, r3]
		}
		break;
 8000ce4:	e003      	b.n	8000cee <trafficLightFSM+0x126>
		break;
 8000ce6:	bf00      	nop
 8000ce8:	e002      	b.n	8000cf0 <trafficLightFSM+0x128>
		break;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <trafficLightFSM+0x128>
		break;
 8000cee:	bf00      	nop
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200000bc 	.word	0x200000bc
 8000cfc:	200000b8 	.word	0x200000b8
 8000d00:	200000c3 	.word	0x200000c3
 8000d04:	200000c1 	.word	0x200000c1
 8000d08:	200000c2 	.word	0x200000c2

08000d0c <pedestrianStateFSM>:

void pedestrianStateFSM(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	switch (pState){
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <pedestrianStateFSM+0xa0>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d018      	beq.n	8000d4a <pedestrianStateFSM+0x3e>
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	dc3e      	bgt.n	8000d9a <pedestrianStateFSM+0x8e>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <pedestrianStateFSM+0x1a>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d003      	beq.n	8000d2c <pedestrianStateFSM+0x20>
 8000d24:	e039      	b.n	8000d9a <pedestrianStateFSM+0x8e>
	case SLEEP:
		buzzerNoBeep();
 8000d26:	f7ff faf9 	bl	800031c <buzzerNoBeep>
		break;
 8000d2a:	e03d      	b.n	8000da8 <pedestrianStateFSM+0x9c>
	case WAIT:
		buzzerNoBeep();
 8000d2c:	f7ff faf6 	bl	800031c <buzzerNoBeep>
		if (ledState[VERTICAL] == RED && light_counter[VERTICAL] >= 8 * ONE_SECOND){
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <pedestrianStateFSM+0xa4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d134      	bne.n	8000da2 <pedestrianStateFSM+0x96>
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <pedestrianStateFSM+0xa8>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000d40:	d32f      	bcc.n	8000da2 <pedestrianStateFSM+0x96>
			pState = ACROSS;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <pedestrianStateFSM+0xa0>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d48:	e02b      	b.n	8000da2 <pedestrianStateFSM+0x96>
	case ACROSS:
		if (ledState[VERTICAL] == GREEN || ledState[VERTICAL] == AMBER){
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <pedestrianStateFSM+0xa4>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d003      	beq.n	8000d5a <pedestrianStateFSM+0x4e>
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <pedestrianStateFSM+0xa4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d102      	bne.n	8000d60 <pedestrianStateFSM+0x54>
			pState = SLEEP;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <pedestrianStateFSM+0xa0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		}

		//Peep peep peep
		if (ledState[VERTICAL] == RED) {
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <pedestrianStateFSM+0xa4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d11e      	bne.n	8000da6 <pedestrianStateFSM+0x9a>
			buzzer_counter--;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <pedestrianStateFSM+0xac>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <pedestrianStateFSM+0xac>)
 8000d78:	801a      	strh	r2, [r3, #0]
			if (buzzer_counter <= 0){
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <pedestrianStateFSM+0xac>)
 8000d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dc10      	bgt.n	8000da6 <pedestrianStateFSM+0x9a>
				buzzer_counter = setCounterForBuzzer();
 8000d84:	f7ff fe8c 	bl	8000aa0 <setCounterForBuzzer>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <pedestrianStateFSM+0xac>)
 8000d8e:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000d90:	2104      	movs	r1, #4
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <pedestrianStateFSM+0xb0>)
 8000d94:	f001 f9db 	bl	800214e <HAL_GPIO_TogglePin>
			}
		}
		break;
 8000d98:	e005      	b.n	8000da6 <pedestrianStateFSM+0x9a>
	default:
		pState = SLEEP;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <pedestrianStateFSM+0xa0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000da0:	e002      	b.n	8000da8 <pedestrianStateFSM+0x9c>
		break;
 8000da2:	bf00      	nop
 8000da4:	e000      	b.n	8000da8 <pedestrianStateFSM+0x9c>
		break;
 8000da6:	bf00      	nop
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000c0 	.word	0x200000c0
 8000db0:	200000b8 	.word	0x200000b8
 8000db4:	200000bc 	.word	0x200000bc
 8000db8:	200000e0 	.word	0x200000e0
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <runStateFSM>:

void runStateFSM(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	switch (runState){
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <runStateFSM+0xb0>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d845      	bhi.n	8000e5a <runStateFSM+0x9a>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <runStateFSM+0x14>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000dfb 	.word	0x08000dfb
 8000ddc:	08000e1b 	.word	0x08000e1b
 8000de0:	08000e3b 	.word	0x08000e3b
		case NORMAL_MODE:
		//Run 2 traffic light FSMs.
		trafficLightFSM(VERTICAL);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff feef 	bl	8000bc8 <trafficLightFSM>
		trafficLightFSM(HORIZONTAL);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff feec 	bl	8000bc8 <trafficLightFSM>
		pedestrianStateFSM();
 8000df0:	f7ff ff8c 	bl	8000d0c <pedestrianStateFSM>
		displayPLED();
 8000df4:	f7ff fad6 	bl	80003a4 <displayPLED>
		break;
 8000df8:	e038      	b.n	8000e6c <runStateFSM+0xac>
	case MODIFY_DURATION_RED_MODE:
		//Blinking Red LED in 0.5s
		blinking_counter--;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <runStateFSM+0xb4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <runStateFSM+0xb4>)
 8000e02:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <runStateFSM+0xb4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dc2a      	bgt.n	8000e62 <runStateFSM+0xa2>
			blinking_counter = HALF_SECOND;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <runStateFSM+0xb4>)
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	601a      	str	r2, [r3, #0]
			TogglePinLED(RED);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f000 fdee 	bl	80019f4 <TogglePinLED>
		}
		break;
 8000e18:	e023      	b.n	8000e62 <runStateFSM+0xa2>
	case MODIFY_DURATION_AMBER_MODE:
		//Blinking Amber LED in 0.5s
		blinking_counter--;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <runStateFSM+0xb4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <runStateFSM+0xb4>)
 8000e22:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <runStateFSM+0xb4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dc1c      	bgt.n	8000e66 <runStateFSM+0xa6>
			blinking_counter = HALF_SECOND;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <runStateFSM+0xb4>)
 8000e2e:	2232      	movs	r2, #50	; 0x32
 8000e30:	601a      	str	r2, [r3, #0]
			TogglePinLED(AMBER);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 fdde 	bl	80019f4 <TogglePinLED>
		}
		break;
 8000e38:	e015      	b.n	8000e66 <runStateFSM+0xa6>
	case MODIFY_DURATION_GREEN_MODE:
		//Blinking Green LED in 0.5s
		blinking_counter--;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <runStateFSM+0xb4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <runStateFSM+0xb4>)
 8000e42:	6013      	str	r3, [r2, #0]
		if (blinking_counter <= 0) {
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <runStateFSM+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dc0e      	bgt.n	8000e6a <runStateFSM+0xaa>
			blinking_counter = HALF_SECOND;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <runStateFSM+0xb4>)
 8000e4e:	2232      	movs	r2, #50	; 0x32
 8000e50:	601a      	str	r2, [r3, #0]
			TogglePinLED(GREEN);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 fdce 	bl	80019f4 <TogglePinLED>
		}
		break;
 8000e58:	e007      	b.n	8000e6a <runStateFSM+0xaa>
	default:
		runState = NORMAL_MODE;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <runStateFSM+0xb0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e60:	e004      	b.n	8000e6c <runStateFSM+0xac>
		break;
 8000e62:	bf00      	nop
 8000e64:	e002      	b.n	8000e6c <runStateFSM+0xac>
		break;
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <runStateFSM+0xac>
		break;
 8000e6a:	bf00      	nop
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000b4 	.word	0x200000b4
 8000e74:	200000d8 	.word	0x200000d8

08000e78 <inputReadingInit>:

//These variable use for handling pressed more than one second.
uint8_t flagOneSec[NO_BUTTON];
short counterOneSec[NO_BUTTON];

void inputReadingInit(void){
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
	for(short i = 0; i < NO_BUTTON; i++){
 8000e7e:	2300      	movs	r3, #0
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	e021      	b.n	8000ec8 <inputReadingInit+0x50>
		filtered[i] = buffer0[i] = buffer1[i] = BUTTON_RELEASED;
 8000e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <inputReadingInit+0x64>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	5499      	strb	r1, [r3, r2]
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	4912      	ldr	r1, [pc, #72]	; (8000edc <inputReadingInit+0x64>)
 8000e94:	5c89      	ldrb	r1, [r1, r2]
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <inputReadingInit+0x68>)
 8000e98:	54d1      	strb	r1, [r2, r3]
 8000e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e9e:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <inputReadingInit+0x68>)
 8000ea0:	5cc9      	ldrb	r1, [r1, r3]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <inputReadingInit+0x6c>)
 8000ea4:	5499      	strb	r1, [r3, r2]
		flagOneSec[i] = 0;
 8000ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <inputReadingInit+0x70>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	54d1      	strb	r1, [r2, r3]
		counterOneSec[i] = ONE_SECOND;
 8000eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <inputReadingInit+0x74>)
 8000eb6:	2164      	movs	r1, #100	; 0x64
 8000eb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(short i = 0; i < NO_BUTTON; i++){
 8000ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	ddd9      	ble.n	8000e84 <inputReadingInit+0xc>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	200000ec 	.word	0x200000ec
 8000ee0:	200000e8 	.word	0x200000e8
 8000ee4:	200000e4 	.word	0x200000e4
 8000ee8:	200000f0 	.word	0x200000f0
 8000eec:	200000f4 	.word	0x200000f4

08000ef0 <buttonReading>:

void buttonReading(const short index){
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
	//Save 2 recently states
	buffer1[index] = buffer0[index];
 8000efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	492c      	ldr	r1, [pc, #176]	; (8000fb4 <buttonReading+0xc4>)
 8000f04:	5c89      	ldrb	r1, [r1, r2]
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <buttonReading+0xc8>)
 8000f08:	54d1      	strb	r1, [r2, r3]
	buffer0[index] = HAL_GPIO_ReadPin(BTN_GPIO[index], BTN_Pin[index]);
 8000f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0e:	4a2b      	ldr	r2, [pc, #172]	; (8000fbc <buttonReading+0xcc>)
 8000f10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f18:	4929      	ldr	r1, [pc, #164]	; (8000fc0 <buttonReading+0xd0>)
 8000f1a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f001 f8e2 	bl	80020f0 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <buttonReading+0xc4>)
 8000f32:	551a      	strb	r2, [r3, r4]

	//If all saved states equal -> that's a good reading (filtered)
	if(buffer1[index] == buffer0[index]){
 8000f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f38:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <buttonReading+0xc8>)
 8000f3a:	5cd2      	ldrb	r2, [r2, r3]
 8000f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f40:	491c      	ldr	r1, [pc, #112]	; (8000fb4 <buttonReading+0xc4>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d131      	bne.n	8000fac <buttonReading+0xbc>
		filtered[index] = buffer0[index];
 8000f48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f50:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <buttonReading+0xc4>)
 8000f52:	5c89      	ldrb	r1, [r1, r2]
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <buttonReading+0xd4>)
 8000f56:	54d1      	strb	r1, [r2, r3]
		//If button_pressed -> counter will work, if not -> just reset counter.
		if (filtered[index] == BUTTON_PRESSED){
 8000f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <buttonReading+0xd4>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d118      	bne.n	8000f96 <buttonReading+0xa6>
			counterOneSec[index]--;
 8000f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <buttonReading+0xd8>)
 8000f6a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	3a01      	subs	r2, #1
 8000f72:	b292      	uxth	r2, r2
 8000f74:	b211      	sxth	r1, r2
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <buttonReading+0xd8>)
 8000f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (counterOneSec[index] <= 0){
 8000f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f80:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <buttonReading+0xd8>)
 8000f82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc10      	bgt.n	8000fac <buttonReading+0xbc>
				flagOneSec[index] = 1;
 8000f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <buttonReading+0xdc>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	54d1      	strb	r1, [r2, r3]
		} else {
			counterOneSec[index] = ONE_SECOND;
			flagOneSec[index] = 0;
		}
	}
}
 8000f94:	e00a      	b.n	8000fac <buttonReading+0xbc>
			counterOneSec[index] = ONE_SECOND;
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <buttonReading+0xd8>)
 8000f9c:	2164      	movs	r1, #100	; 0x64
 8000f9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagOneSec[index] = 0;
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <buttonReading+0xdc>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	54d1      	strb	r1, [r2, r3]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	200000e8 	.word	0x200000e8
 8000fb8:	200000ec 	.word	0x200000ec
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	08004688 	.word	0x08004688
 8000fc4:	200000e4 	.word	0x200000e4
 8000fc8:	200000f4 	.word	0x200000f4
 8000fcc:	200000f0 	.word	0x200000f0

08000fd0 <isButtonPressed>:

uint8_t isButtonPressed(const short index){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	return (filtered[index] == BUTTON_PRESSED);
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <isButtonPressed+0x28>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200000e4 	.word	0x200000e4

08000ffc <isButtonPressedOneSec>:

uint8_t isButtonPressedOneSec(const short index){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	return flagOneSec[index];
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	4a03      	ldr	r2, [pc, #12]	; (8001018 <isButtonPressedOneSec+0x1c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	200000f0 	.word	0x200000f0

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fd4e 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f82a 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f90e 	bl	8001248 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102c:	f000 f8e2 	bl	80011f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001030:	f000 f894 	bl	800115c <MX_TIM2_Init>
  MX_I2C2_Init();
 8001034:	f000 f864 	bl	8001100 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001038:	f7ff f91e 	bl	8000278 <lcd_init>
  SCH_Init();
 800103c:	f000 f9c8 	bl	80013d0 <SCH_Init>

  inputReadingInit();
 8001040:	f7ff ff1a 	bl	8000e78 <inputReadingInit>
  inputProcessingInit(&huart2);
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <main+0x50>)
 8001046:	f7ff f9f3 	bl	8000430 <inputProcessingInit>

  //SCH_Add_Task(blinkingLED, 10, 1000);
  SCH_Add_Task(readInputAndProcessing, 0, 10);
 800104a:	220a      	movs	r2, #10
 800104c:	2100      	movs	r1, #0
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <main+0x54>)
 8001050:	f000 fad6 	bl	8001600 <SCH_Add_Task>
  SCH_Add_Task(runStateFSM, 10, 10);
 8001054:	220a      	movs	r2, #10
 8001056:	210a      	movs	r1, #10
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <main+0x58>)
 800105a:	f000 fad1 	bl	8001600 <SCH_Add_Task>
  //SCH_Add_Task(toggleBuzzer, 10, 500);
  //SCH_Add_Task(displayPLED, 20, 20);

  HAL_TIM_Base_Start_IT(&htim2);
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <main+0x5c>)
 8001060:	f002 f98a 	bl	8003378 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001064:	f000 fae6 	bl	8001634 <SCH_Dispatch_Tasks>
 8001068:	e7fc      	b.n	8001064 <main+0x48>
 800106a:	bf00      	nop
 800106c:	20000198 	.word	0x20000198
 8001070:	080013ad 	.word	0x080013ad
 8001074:	08000dc1 	.word	0x08000dc1
 8001078:	20000150 	.word	0x20000150

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	; 0x40
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fe3a 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fcfb 	bl	8002ab8 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010c8:	f000 f97c 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 ff68 	bl	8002fbc <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010f2:	f000 f967 	bl	80013c4 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3740      	adds	r7, #64	; 0x40
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C2_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C2_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C2_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C2_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C2_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C2_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C2_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C2_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C2_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C2_Init+0x50>)
 800113e:	f001 f81f 	bl	8002180 <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f93c 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200000fc 	.word	0x200000fc
 8001154:	40005800 	.word	0x40005800
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM2_Init+0x94>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001182:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001190:	2209      	movs	r2, #9
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM2_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011a2:	f002 f899 	bl	80032d8 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ac:	f000 f90a 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011be:	f002 fa35 	bl	800362c <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 f8fc 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011da:	f002 fc0b 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f000 f8ee 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000150 	.word	0x20000150

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f002 fc52 	bl	8003ad4 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f8c5 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000198 	.word	0x20000198
 8001244:	40004400 	.word	0x40004400

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <MX_GPIO_Init+0x140>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a49      	ldr	r2, [pc, #292]	; (8001388 <MX_GPIO_Init+0x140>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <MX_GPIO_Init+0x140>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <MX_GPIO_Init+0x140>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a43      	ldr	r2, [pc, #268]	; (8001388 <MX_GPIO_Init+0x140>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b41      	ldr	r3, [pc, #260]	; (8001388 <MX_GPIO_Init+0x140>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <MX_GPIO_Init+0x140>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <MX_GPIO_Init+0x140>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_GPIO_Init+0x140>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_GPIO_Init+0x140>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a37      	ldr	r2, [pc, #220]	; (8001388 <MX_GPIO_Init+0x140>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_GPIO_Init+0x140>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PLED_RED_Pin|PLED_GREEN_Pin|BUZZER_Pin|TL2_A_Pin
 80012bc:	2200      	movs	r2, #0
 80012be:	f640 4107 	movw	r1, #3079	; 0xc07
 80012c2:	4832      	ldr	r0, [pc, #200]	; (800138c <MX_GPIO_Init+0x144>)
 80012c4:	f000 ff2b 	bl	800211e <HAL_GPIO_WritePin>
                          |TL2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL1_B_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2130      	movs	r1, #48	; 0x30
 80012cc:	4830      	ldr	r0, [pc, #192]	; (8001390 <MX_GPIO_Init+0x148>)
 80012ce:	f000 ff26 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL1_A_GPIO_Port, TL1_A_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	482f      	ldr	r0, [pc, #188]	; (8001394 <MX_GPIO_Init+0x14c>)
 80012d8:	f000 ff21 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PLED_RED_Pin PLED_GREEN_Pin BUZZER_Pin TL2_A_Pin
                           TL2_B_Pin */
  GPIO_InitStruct.Pin = PLED_RED_Pin|PLED_GREEN_Pin|BUZZER_Pin|TL2_A_Pin
 80012dc:	f640 4307 	movw	r3, #3079	; 0xc07
 80012e0:	613b      	str	r3, [r7, #16]
                          |TL2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	4825      	ldr	r0, [pc, #148]	; (800138c <MX_GPIO_Init+0x144>)
 80012f6:	f000 fd77 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOD_BTN_Pin SEL_BTN_Pin */
  GPIO_InitStruct.Pin = MOD_BTN_Pin|SEL_BTN_Pin;
 80012fa:	f240 2302 	movw	r3, #514	; 0x202
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	4820      	ldr	r0, [pc, #128]	; (8001390 <MX_GPIO_Init+0x148>)
 8001310:	f000 fd6a 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL1_B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TL1_B_Pin|LD2_Pin;
 8001314:	2330      	movs	r3, #48	; 0x30
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4819      	ldr	r0, [pc, #100]	; (8001390 <MX_GPIO_Init+0x148>)
 800132c:	f000 fd5c 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL1_A_Pin */
  GPIO_InitStruct.Pin = TL1_A_Pin;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_A_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_GPIO_Init+0x14c>)
 8001348:	f000 fd4e 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : P_BTN_Pin */
  GPIO_InitStruct.Pin = P_BTN_Pin;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(P_BTN_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4619      	mov	r1, r3
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <MX_GPIO_Init+0x144>)
 8001362:	f000 fd41 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_BTN_Pin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_GPIO_Init+0x14c>)
 800137c:	f000 fd34 	bl	8001de8 <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40011000 	.word	0x40011000
 8001390:	40010800 	.word	0x40010800
 8001394:	40010c00 	.word	0x40010c00

08001398 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80013a0:	f000 f836 	bl	8001410 <SCH_Update>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <readInputAndProcessing>:
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
void toggleBuzzer(void){
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
}
void readInputAndProcessing(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	handlePedestrianButton();
 80013b0:	f7ff fb68 	bl	8000a84 <handlePedestrianButton>
	handleSelectModeButton();
 80013b4:	f7ff fb58 	bl	8000a68 <handleSelectModeButton>
	handleModifyButton();
 80013b8:	f7ff fb2e 	bl	8000a18 <handleModifyButton>
	handleSetValueButton();
 80013bc:	f7ff fb1e 	bl	80009fc <handleSetValueButton>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <SCH_Init>:
/*
 * For report error
 */
uint8_t errorCode;

void SCH_Init(void){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	head_task 	= NULL;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <SCH_Init+0x2c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
	time_skip 	= 0;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <SCH_Init+0x30>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
	count_task 	= 0;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <SCH_Init+0x34>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
	next_id 	= 1;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SCH_Init+0x38>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	801a      	strh	r2, [r3, #0]
	errorCode	= 0;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <SCH_Init+0x3c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200001e0 	.word	0x200001e0
 8001400:	200001e4 	.word	0x200001e4
 8001404:	200001e6 	.word	0x200001e6
 8001408:	200001e8 	.word	0x200001e8
 800140c:	200001ec 	.word	0x200001ec

08001410 <SCH_Update>:

void SCH_Update(void){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
	if (head_task == NULL) {
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <SCH_Update+0x80>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <SCH_Update+0x28>
		 * This is for situation, you just have one task run.
		 * When task ran completely, it will dequeue, but at this time
		 * SCH_Update can be run, and if we not add 1 for time_skip
		 * instead of do nothing, your task will run wrong time.
		 */
		time_skip = (count_task > 0) ? time_skip + 1 : 0;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <SCH_Update+0x84>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <SCH_Update+0x20>
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <SCH_Update+0x88>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	e000      	b.n	8001432 <SCH_Update+0x22>
 8001430:	2300      	movs	r3, #0
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <SCH_Update+0x88>)
 8001434:	8013      	strh	r3, [r2, #0]
		return;
 8001436:	e026      	b.n	8001486 <SCH_Update+0x76>
	}
	time_skip++;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <SCH_Update+0x88>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <SCH_Update+0x88>)
 8001442:	801a      	strh	r2, [r3, #0]
	if (head_task->Delay > 0){
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <SCH_Update+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01b      	beq.n	8001486 <SCH_Update+0x76>
		int temp = head_task->Delay - time_skip;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <SCH_Update+0x80>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <SCH_Update+0x88>)
 8001456:	8812      	ldrh	r2, [r2, #0]
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	607b      	str	r3, [r7, #4]
		if (temp >= 0) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db07      	blt.n	8001472 <SCH_Update+0x62>
			head_task->Delay = temp;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <SCH_Update+0x80>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	605a      	str	r2, [r3, #4]
			time_skip = 0;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <SCH_Update+0x88>)
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	e009      	b.n	8001486 <SCH_Update+0x76>
		} else {
			head_task->Delay = 0;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <SCH_Update+0x80>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
			time_skip = 0 - temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b29b      	uxth	r3, r3
 800147e:	425b      	negs	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SCH_Update+0x88>)
 8001484:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200001e0 	.word	0x200001e0
 8001494:	200001e6 	.word	0x200001e6
 8001498:	200001e4 	.word	0x200001e4

0800149c <Create_Task>:

sTask* Create_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	if (count_task > SCH_MAX_TASKS){
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <Create_Task+0x80>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	2b0a      	cmp	r3, #10
 80014ae:	d904      	bls.n	80014ba <Create_Task+0x1e>
		errorCode = ERROR_SCH_TOO_MANY_TASKS;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <Create_Task+0x84>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e02b      	b.n	8001512 <Create_Task+0x76>
	}
	uint16_t newId = next_id++;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <Create_Task+0x88>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	b291      	uxth	r1, r2
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <Create_Task+0x88>)
 80014c4:	8011      	strh	r1, [r2, #0]
 80014c6:	82fb      	strh	r3, [r7, #22]

	Delay  /= TIMER_CYCLE;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <Create_Task+0x8c>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	60bb      	str	r3, [r7, #8]
	Period /= TIMER_CYCLE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <Create_Task+0x8c>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	607b      	str	r3, [r7, #4]

	sTask* newTask = malloc(sizeof(sTask));
 80014e0:	2014      	movs	r0, #20
 80014e2:	f002 fbff 	bl	8003ce4 <malloc>
 80014e6:	4603      	mov	r3, r0
 80014e8:	613b      	str	r3, [r7, #16]

	newTask->pFunc 		= pFunc;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]
	newTask->Delay 		= Delay + time_skip;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <Create_Task+0x90>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	441a      	add	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
	newTask->Period	    = Period;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
	newTask->TaskID		= newId;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	8afa      	ldrh	r2, [r7, #22]
 8001508:	819a      	strh	r2, [r3, #12]
	newTask->Next 		= NULL;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]

	return newTask;
 8001510:	693b      	ldr	r3, [r7, #16]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001e6 	.word	0x200001e6
 8001520:	200001ec 	.word	0x200001ec
 8001524:	200001e8 	.word	0x200001e8
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	200001e4 	.word	0x200001e4

08001530 <Enqueue_Task>:
 * Enqueue and modify Delay
 * Example: A->Delay = 1000, B->Delay = 2000, C->Delay = 3000
 * When we completely add all of them in queue, the queue will be
 * Element 1: A->Delay = 1000, Element 2: B->Delay = 1000, C->Delay = 1000
 */
sTask* Enqueue_Task(sTask* newTask){
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	//First task in queue.
	if (head_task == NULL){
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <Enqueue_Task+0xcc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <Enqueue_Task+0x1a>
		head_task = newTask;
 8001540:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <Enqueue_Task+0xcc>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
		return newTask;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e052      	b.n	80015f0 <Enqueue_Task+0xc0>
	}

	//Task will add at middle of queue.
	sTask *ini = head_task;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <Enqueue_Task+0xcc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	617b      	str	r3, [r7, #20]
	sTask *pre = NULL;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
	uint32_t sum = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
	while (ini != NULL){
 8001558:	e03a      	b.n	80015d0 <Enqueue_Task+0xa0>
		if (sum + ini->Delay > newTask->Delay){
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	441a      	add	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d928      	bls.n	80015bc <Enqueue_Task+0x8c>
			if (ini == head_task){
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <Enqueue_Task+0xcc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d10e      	bne.n	8001592 <Enqueue_Task+0x62>
				newTask->Next = head_task;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <Enqueue_Task+0xcc>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	611a      	str	r2, [r3, #16]
				head_task 	= newTask;
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <Enqueue_Task+0xcc>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
				ini->Delay -= newTask->Delay;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	e012      	b.n	80015b8 <Enqueue_Task+0x88>
			} else {
				newTask->Next 	= ini;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	611a      	str	r2, [r3, #16]
				pre->Next 		= newTask;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]
				newTask->Delay -= sum;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
				ini->Delay     -= newTask->Delay;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	605a      	str	r2, [r3, #4]
			}
			return newTask;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	e019      	b.n	80015f0 <Enqueue_Task+0xc0>
		}
		sum 	+= ini->Delay;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
		pre		 = ini;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	613b      	str	r3, [r7, #16]
		ini		 = ini->Next;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	617b      	str	r3, [r7, #20]
	while (ini != NULL){
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1c1      	bne.n	800155a <Enqueue_Task+0x2a>
	}

	//Task will add of tail
	if (ini == NULL){
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <Enqueue_Task+0xbe>
		pre->Next 		= newTask;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	611a      	str	r2, [r3, #16]
		newTask->Delay -= sum;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad2      	subs	r2, r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
	}

	return newTask;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200001e0 	.word	0x200001e0

08001600 <SCH_Add_Task>:

sTask* SCH_Add_Task(void (*pFunc)(void), uint32_t Delay, uint32_t Period){
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	sTask* newTask = Create_Task(pFunc, Delay, Period);
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff ff43 	bl	800149c <Create_Task>
 8001616:	6178      	str	r0, [r7, #20]
	if (newTask == NULL){
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <SCH_Add_Task+0x22>
		return NULL;
 800161e:	2300      	movs	r3, #0
 8001620:	e003      	b.n	800162a <SCH_Add_Task+0x2a>
	}
	return Enqueue_Task(newTask);
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff84 	bl	8001530 <Enqueue_Task>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <SCH_Dispatch_Tasks>:

/*
 * If no task run => return 0
 * task run => return 1
 */
uint8_t SCH_Dispatch_Tasks(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
	if (head_task == NULL || head_task->Delay > 0) return 0;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <SCH_Dispatch_Tasks+0x68>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <SCH_Dispatch_Tasks+0x18>
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <SCH_Dispatch_Tasks+0x68>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SCH_Dispatch_Tasks+0x1c>
 800164c:	2300      	movs	r3, #0
 800164e:	e021      	b.n	8001694 <SCH_Dispatch_Tasks+0x60>

	// Remove head task out of queue (dequeue, not delete)
	// and config delay then enqueue it again.
	sTask* runningTask = head_task;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <SCH_Dispatch_Tasks+0x68>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	607b      	str	r3, [r7, #4]
	head_task = head_task->Next;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <SCH_Dispatch_Tasks+0x68>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <SCH_Dispatch_Tasks+0x68>)
 800165e:	6013      	str	r3, [r2, #0]

	runningTask->Next 	= NULL;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
	runningTask->Delay 	= runningTask->Period;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]

	// Run task
	runningTask->pFunc();
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4798      	blx	r3
	// Save the task just ran
	TaskIdJustRun = runningTask->TaskID;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	899a      	ldrh	r2, [r3, #12]
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <SCH_Dispatch_Tasks+0x6c>)
 800167a:	801a      	strh	r2, [r3, #0]

	// Add again if a task has period value isn't equal to 0.
	if (runningTask->Period != 0) Enqueue_Task(runningTask);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <SCH_Dispatch_Tasks+0x58>
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff53 	bl	8001530 <Enqueue_Task>
 800168a:	e002      	b.n	8001692 <SCH_Dispatch_Tasks+0x5e>
	else free(runningTask);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f002 fb31 	bl	8003cf4 <free>

	return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200001e0 	.word	0x200001e0
 80016a0:	200001ea 	.word	0x200001ea

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_I2C_MspInit+0x74>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d124      	bne.n	8001772 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_I2C_MspInit+0x78>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_I2C_MspInit+0x78>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_I2C_MspInit+0x78>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <HAL_I2C_MspInit+0x7c>)
 8001756:	f000 fb47 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_I2C_MspInit+0x78>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_I2C_MspInit+0x78>)
 8001760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_I2C_MspInit+0x78>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40005800 	.word	0x40005800
 8001780:	40021000 	.word	0x40021000
 8001784:	40010c00 	.word	0x40010c00

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d113      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	201c      	movs	r0, #28
 80017b8:	f000 fadf 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017bc:	201c      	movs	r0, #28
 80017be:	f000 faf8 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_UART_MspInit+0x70>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d123      	bne.n	8001838 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x74>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_UART_MspInit+0x74>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fa:	61d3      	str	r3, [r2, #28]
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x74>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0x74>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_UART_MspInit+0x74>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_UART_MspInit+0x74>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001820:	230c      	movs	r3, #12
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_MspInit+0x78>)
 8001834:	f000 fad8 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004400 	.word	0x40004400
 8001844:	40021000 	.word	0x40021000
 8001848:	40010800 	.word	0x40010800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001892:	f000 f95b 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TIM2_IRQHandler+0x10>)
 80018a2:	f001 fdbb 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000150 	.word	0x20000150

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f002 f9d6 	bl	8003c90 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20005000 	.word	0x20005000
 8001910:	00000400 	.word	0x00000400
 8001914:	200001f0 	.word	0x200001f0
 8001918:	20000208 	.word	0x20000208

0800191c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <resetAllLED>:
const short TL_Pin[DIMENSION * 2] = {
		TL1_A_Pin, TL1_B_Pin,
		TL2_A_Pin, TL2_B_Pin
};

void resetAllLED(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL_GPIO[0], TL_Pin[0], RESET);
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <resetAllLED+0x4c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	b291      	uxth	r1, r2
 8001934:	2200      	movs	r2, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fbf1 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[1], TL_Pin[1], RESET);
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <resetAllLED+0x4c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2210      	movs	r2, #16
 8001942:	b291      	uxth	r1, r2
 8001944:	2200      	movs	r2, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fbe9 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[2], TL_Pin[2], RESET);
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <resetAllLED+0x4c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001954:	b291      	uxth	r1, r2
 8001956:	2200      	movs	r2, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fbe0 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL_GPIO[3], TL_Pin[3], RESET);
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <resetAllLED+0x4c>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001966:	b291      	uxth	r1, r2
 8001968:	2200      	movs	r2, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fbd7 	bl	800211e <HAL_GPIO_WritePin>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000018 	.word	0x20000018

08001978 <WritePinLED>:

void WritePinLED(const short index, uint8_t state){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	4613      	mov	r3, r2
 8001986:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TL_GPIO[index * 2 + 1], TL_Pin[index * 2 + 1], state & 1);
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3301      	adds	r3, #1
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <WritePinLED+0x74>)
 8001992:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	3301      	adds	r3, #1
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <WritePinLED+0x78>)
 80019a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019a4:	b299      	uxth	r1, r3
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	f000 fbb5 	bl	800211e <HAL_GPIO_WritePin>
	state >>= 1;
 80019b4:	797b      	ldrb	r3, [r7, #5]
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TL_GPIO[index * 2], TL_Pin[index * 2], state & 1);
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <WritePinLED+0x74>)
 80019c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <WritePinLED+0x78>)
 80019ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019d2:	b299      	uxth	r1, r3
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f000 fb9e 	bl	800211e <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000018 	.word	0x20000018
 80019f0:	080046a8 	.word	0x080046a8

080019f4 <TogglePinLED>:

//Depend on `state` parameter. If RED, blinking RED, so on.
void TogglePinLED(uint8_t state){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	switch(state){
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d00f      	beq.n	8001a24 <TogglePinLED+0x30>
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	dc2a      	bgt.n	8001a5e <TogglePinLED+0x6a>
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d01e      	beq.n	8001a4a <TogglePinLED+0x56>
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d126      	bne.n	8001a5e <TogglePinLED+0x6a>
	case RED:
		HAL_GPIO_TogglePin(TL1_A_GPIO_Port, TL1_A_Pin);
 8001a10:	2101      	movs	r1, #1
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <TogglePinLED+0x74>)
 8001a14:	f000 fb9b 	bl	800214e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_A_GPIO_Port, TL2_A_Pin);
 8001a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <TogglePinLED+0x78>)
 8001a1e:	f000 fb96 	bl	800214e <HAL_GPIO_TogglePin>
		break;
 8001a22:	e01c      	b.n	8001a5e <TogglePinLED+0x6a>
	case AMBER:
		HAL_GPIO_TogglePin(TL1_A_GPIO_Port, TL1_A_Pin);
 8001a24:	2101      	movs	r1, #1
 8001a26:	4810      	ldr	r0, [pc, #64]	; (8001a68 <TogglePinLED+0x74>)
 8001a28:	f000 fb91 	bl	800214e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL1_B_GPIO_Port, TL1_B_Pin);
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4810      	ldr	r0, [pc, #64]	; (8001a70 <TogglePinLED+0x7c>)
 8001a30:	f000 fb8d 	bl	800214e <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(TL2_A_GPIO_Port, TL2_A_Pin);
 8001a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <TogglePinLED+0x78>)
 8001a3a:	f000 fb88 	bl	800214e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_B_GPIO_Port, TL2_B_Pin);
 8001a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a42:	480a      	ldr	r0, [pc, #40]	; (8001a6c <TogglePinLED+0x78>)
 8001a44:	f000 fb83 	bl	800214e <HAL_GPIO_TogglePin>
		break;
 8001a48:	e009      	b.n	8001a5e <TogglePinLED+0x6a>
	case GREEN:
		HAL_GPIO_TogglePin(TL1_B_GPIO_Port, TL1_B_Pin);
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <TogglePinLED+0x7c>)
 8001a4e:	f000 fb7e 	bl	800214e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TL2_B_GPIO_Port, TL2_B_Pin);
 8001a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <TogglePinLED+0x78>)
 8001a58:	f000 fb79 	bl	800214e <HAL_GPIO_TogglePin>
 		break;
 8001a5c:	bf00      	nop
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40010800 	.word	0x40010800

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a74:	f7ff ff52 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a90:	4c09      	ldr	r4, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f002 f8fd 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fabb 	bl	800101c <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001ab0:	08004700 	.word	0x08004700
  ldr r2, =_sbss
 8001ab4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ab8:	20000208 	.word	0x20000208

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f947 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fde2 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f95f 	bl	8001dce <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f927 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000014 	.word	0x20000014
 8001b44:	2000002c 	.word	0x2000002c
 8001b48:	20000028 	.word	0x20000028

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	2000002c 	.word	0x2000002c
 8001b6c:	200001f4 	.word	0x200001f4

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	200001f4 	.word	0x200001f4

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000002c 	.word	0x2000002c

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff2d 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff42 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e169      	b.n	80020d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8158 	bne.w	80020ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e24:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d875      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d058      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d86f      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e36:	4a96      	ldr	r2, [pc, #600]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d052      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d869      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e42:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04c      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e48:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d863      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a92      	ldr	r2, [pc, #584]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d046      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e54:	4a90      	ldr	r2, [pc, #576]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d85d      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d82a      	bhi.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d859      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_GPIO_Init+0x80>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ecf 	.word	0x08001ecf
 8001e74:	08001f11 	.word	0x08001f11
 8001e78:	08001f17 	.word	0x08001f17
 8001e7c:	08001f17 	.word	0x08001f17
 8001e80:	08001f17 	.word	0x08001f17
 8001e84:	08001f17 	.word	0x08001f17
 8001e88:	08001f17 	.word	0x08001f17
 8001e8c:	08001f17 	.word	0x08001f17
 8001e90:	08001f17 	.word	0x08001f17
 8001e94:	08001f17 	.word	0x08001f17
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001f17 	.word	0x08001f17
 8001ea4:	08001f17 	.word	0x08001f17
 8001ea8:	08001f17 	.word	0x08001f17
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	4a79      	ldr	r2, [pc, #484]	; (800209c <HAL_GPIO_Init+0x2b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eba:	e02c      	b.n	8001f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e029      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e024      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e01f      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	330c      	adds	r3, #12
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e01a      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eea:	2304      	movs	r3, #4
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e013      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	611a      	str	r2, [r3, #16]
          break;
 8001f02:	e009      	b.n	8001f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	615a      	str	r2, [r3, #20]
          break;
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          break;
 8001f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d801      	bhi.n	8001f22 <HAL_GPIO_Init+0x13a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_Init+0x13e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d802      	bhi.n	8001f34 <HAL_GPIO_Init+0x14c>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x152>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3b08      	subs	r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	210f      	movs	r1, #15
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b1 	beq.w	80020ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_GPIO_Init+0x2c0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <HAL_GPIO_Init+0x2c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3e      	ldr	r2, [pc, #248]	; (80020b0 <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <HAL_GPIO_Init+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1e0>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe6:	492f      	ldr	r1, [pc, #188]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	492c      	ldr	r1, [pc, #176]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4928      	ldr	r1, [pc, #160]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	491e      	ldr	r1, [pc, #120]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4918      	ldr	r1, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4914      	ldr	r1, [pc, #80]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d021      	beq.n	80020bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e021      	b.n	80020ca <HAL_GPIO_Init+0x2e2>
 8002086:	bf00      	nop
 8002088:	10320000 	.word	0x10320000
 800208c:	10310000 	.word	0x10310000
 8002090:	10220000 	.word	0x10220000
 8002094:	10210000 	.word	0x10210000
 8002098:	10120000 	.word	0x10120000
 800209c:	10110000 	.word	0x10110000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010800 	.word	0x40010800
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae8e 	bne.w	8001dfc <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	; 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212e:	787b      	ldrb	r3, [r7, #1]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213a:	e003      	b.n	8002144 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43d9      	mvns	r1, r3
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	400b      	ands	r3, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12b      	b.n	80023ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff faae 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f001 f832 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a81      	ldr	r2, [pc, #516]	; (80023f4 <HAL_I2C_Init+0x274>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x84>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a80      	ldr	r2, [pc, #512]	; (80023f8 <HAL_I2C_Init+0x278>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x92>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a7d      	ldr	r2, [pc, #500]	; (80023fc <HAL_I2C_Init+0x27c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0e7      	b.n	80023ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a78      	ldr	r2, [pc, #480]	; (8002400 <HAL_I2C_Init+0x280>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_I2C_Init+0x274>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <HAL_I2C_Init+0xd4>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_I2C_Init+0xe8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <HAL_I2C_Init+0x284>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	495c      	ldr	r1, [pc, #368]	; (80023f4 <HAL_I2C_Init+0x274>)
 8002284:	428b      	cmp	r3, r1
 8002286:	d819      	bhi.n	80022bc <HAL_I2C_Init+0x13c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e59      	subs	r1, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fbb1 f3f3 	udiv	r3, r1, r3
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_I2C_Init+0x138>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e59      	subs	r1, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	e051      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e04f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_I2C_Init+0x168>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e012      	b.n	800230e <HAL_I2C_Init+0x18e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x196>
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_I2C_Init+0x1dc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <HAL_I2C_Init+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e58      	subs	r0, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	e00f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000186a0 	.word	0x000186a0
 80023f8:	001e847f 	.word	0x001e847f
 80023fc:	003d08ff 	.word	0x003d08ff
 8002400:	431bde83 	.word	0x431bde83
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	817b      	strh	r3, [r7, #10]
 8002418:	4613      	mov	r3, r2
 800241a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff fba8 	bl	8001b70 <HAL_GetTick>
 8002420:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	f040 80e0 	bne.w	80025f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2319      	movs	r3, #25
 8002436:	2201      	movs	r2, #1
 8002438:	4970      	ldr	r1, [pc, #448]	; (80025fc <HAL_I2C_Master_Transmit+0x1f4>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f964 	bl	8002708 <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	e0d3      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x50>
 8002454:	2302      	movs	r3, #2
 8002456:	e0cc      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d007      	beq.n	800247e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2221      	movs	r2, #33	; 0x21
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2210      	movs	r2, #16
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	893a      	ldrh	r2, [r7, #8]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_I2C_Master_Transmit+0x1f8>)
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024c0:	8979      	ldrh	r1, [r7, #10]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f89c 	bl	8002604 <I2C_MasterRequestWrite>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e08d      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024ec:	e066      	b.n	80025bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	6a39      	ldr	r1, [r7, #32]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa22 	bl	800293c <I2C_WaitOnTXEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b04      	cmp	r3, #4
 8002504:	d107      	bne.n	8002516 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06b      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d11b      	bne.n	8002590 <HAL_I2C_Master_Transmit+0x188>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	6a39      	ldr	r1, [r7, #32]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa19 	bl	80029cc <I2C_WaitOnBTFFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e01a      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d194      	bne.n	80024ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000

08002604 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d006      	beq.n	800262e <I2C_MasterRequestWrite+0x2a>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d003      	beq.n	800262e <I2C_MasterRequestWrite+0x2a>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800262c:	d108      	bne.n	8002640 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e00b      	b.n	8002658 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	2b12      	cmp	r3, #18
 8002646:	d107      	bne.n	8002658 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002656:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f84f 	bl	8002708 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	d103      	bne.n	8002688 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e035      	b.n	80026f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002694:	d108      	bne.n	80026a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a4:	611a      	str	r2, [r3, #16]
 80026a6:	e01b      	b.n	80026e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a8:	897b      	ldrh	r3, [r7, #10]
 80026aa:	11db      	asrs	r3, r3, #7
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0306 	and.w	r3, r3, #6
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f063 030f 	orn	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <I2C_MasterRequestWrite+0xfc>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f898 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e010      	b.n	80026f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <I2C_MasterRequestWrite+0x100>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f888 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	00010008 	.word	0x00010008
 8002704:	00010002 	.word	0x00010002

08002708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002718:	e048      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d044      	beq.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7ff fa25 	bl	8001b70 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d139      	bne.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10d      	bne.n	800275e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	e00c      	b.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x70>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d116      	bne.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e023      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	e00c      	b.n	80027ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d093      	beq.n	800271a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800280a:	e071      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d123      	bne.n	8002864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e067      	b.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d041      	beq.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7ff f980 	bl	8001b70 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d136      	bne.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10c      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e00b      	b.n	80028be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e021      	b.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10c      	bne.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e00b      	b.n	800292c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4013      	ands	r3, r2
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f af6d 	bne.w	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002948:	e034      	b.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f886 	bl	8002a5c <I2C_IsAcknowledgeFailed>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e034      	b.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d028      	beq.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002962:	f7ff f905 	bl	8001b70 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11d      	bne.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d016      	beq.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e007      	b.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d1c3      	bne.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d8:	e034      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f83e 	bl	8002a5c <I2C_IsAcknowledgeFailed>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e034      	b.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d028      	beq.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff f8bd 	bl	8001b70 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11d      	bne.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d016      	beq.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d1c3      	bne.n	80029da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d11b      	bne.n	8002aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e272      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8087 	beq.w	8002be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d00c      	beq.n	8002afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae4:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d112      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d10b      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x12c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d168      	bne.n	8002be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e24c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x76>
 8002b20:	4b80      	ldr	r3, [pc, #512]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7f      	ldr	r2, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e02e      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a77      	ldr	r2, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0xbc>
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xd4>
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6a      	ldr	r2, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe ffec 	bl	8001b70 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe ffe8 	bl	8001b70 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e200      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xe4>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe ffd8 	bl	8001b70 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe ffd4 	bl	8001b70 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ec      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x10c>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bfe:	4b49      	ldr	r3, [pc, #292]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c0      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4939      	ldr	r1, [pc, #228]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe ff8d 	bl	8001b70 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe ff89 	bl	8001b70 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4927      	ldr	r1, [pc, #156]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_RCC_OscConfig+0x270>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe ff6c 	bl	8001b70 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fe ff68 	bl	8001b70 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e180      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe ff4c 	bl	8001b70 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe ff48 	bl	8001b70 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e160      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 face 	bl	800329c <RCC_Delay>
 8002d00:	e01c      	b.n	8002d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7fe ff32 	bl	8001b70 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fe ff2e 	bl	8001b70 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e146      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	42420000 	.word	0x42420000
 8002d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e9      	bne.n	8002d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a6 	beq.w	8002e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a87      	ldr	r2, [pc, #540]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b85      	ldr	r3, [pc, #532]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe feef 	bl	8001b70 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7fe feeb 	bl	8001b70 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e103      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x4c8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x312>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	e02d      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x334>
 8002dd2:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a69      	ldr	r2, [pc, #420]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a66      	ldr	r2, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	e01c      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x356>
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a60      	ldr	r2, [pc, #384]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCC_OscConfig+0x36e>
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d015      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fe9f 	bl	8001b70 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fe9b 	bl	8001b70 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0b1      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCC_OscConfig+0x37e>
 8002e58:	e014      	b.n	8002e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fe89 	bl	8001b70 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fe85 	bl	8001b70 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e09b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d061      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d146      	bne.n	8002f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fe59 	bl	8001b70 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fe55 	bl	8001b70 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e06d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4921      	ldr	r1, [pc, #132]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a19      	ldr	r1, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fe29 	bl	8001b70 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fe25 	bl	8001b70 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e03d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46a>
 8002f40:	e035      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fe12 	bl	8001b70 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fe0e 	bl	8001b70 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e026      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x498>
 8002f6e:	e01e      	b.n	8002fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e019      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x500>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d0      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4965      	ldr	r1, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800303a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d040      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e073      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4936      	ldr	r1, [pc, #216]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fd60 	bl	8001b70 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fe fd5c 	bl	8001b70 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e053      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d210      	bcs.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1cc>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fcbe 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	08004690 	.word	0x08004690
 8003188:	20000014 	.word	0x20000014
 800318c:	20000028 	.word	0x20000028

08003190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x36>
 80031be:	e027      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	e027      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0c9b      	lsrs	r3, r3, #18
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c5b      	lsrs	r3, r3, #17
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 80031f2:	fb03 f202 	mul.w	r2, r3, r2
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e004      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetSysClockFreq+0x98>)
 8003212:	613b      	str	r3, [r7, #16]
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	693b      	ldr	r3, [r7, #16]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	080046b0 	.word	0x080046b0
 8003230:	080046c0 	.word	0x080046c0
 8003234:	003d0900 	.word	0x003d0900

08003238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <HAL_RCC_GetHCLKFreq+0x10>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000014 	.word	0x20000014

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff2 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	080046a0 	.word	0x080046a0

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003278:	f7ff ffde 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	080046a0 	.word	0x080046a0

0800329c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <RCC_Delay+0x34>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <RCC_Delay+0x38>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032b8:	bf00      	nop
  }
  while (Delay --);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f9      	bne.n	80032b8 <RCC_Delay+0x1c>
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	20000014 	.word	0x20000014
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e041      	b.n	800336e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fa42 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f000 fa74 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d001      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e03a      	b.n	8003406 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_TIM_Base_Start_IT+0x98>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x58>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x58>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_TIM_Base_Start_IT+0x9c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x58>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <HAL_TIM_Base_Start_IT+0xa0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d010      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	e007      	b.n	8003404 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800

0800341c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0202 	mvn.w	r2, #2
 8003448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9b4 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f9a7 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f9b6 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0204 	mvn.w	r2, #4
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f98a 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f97d 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f98c 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0208 	mvn.w	r2, #8
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f960 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f953 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f962 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b10      	cmp	r3, #16
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2208      	movs	r2, #8
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f936 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f929 	bl	80037ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f938 	bl	80037de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0201 	mvn.w	r2, #1
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fefc 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa7b 	bl	8003ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8fc 	bl	80037f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0220 	mvn.w	r2, #32
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa46 	bl	8003ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e0b4      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x186>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003680:	d03e      	beq.n	8003700 <HAL_TIM_ConfigClockSource+0xd4>
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	f200 8087 	bhi.w	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 800368a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368e:	f000 8086 	beq.w	800379e <HAL_TIM_ConfigClockSource+0x172>
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d87f      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d01a      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0xa6>
 800369c:	2b70      	cmp	r3, #112	; 0x70
 800369e:	d87b      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d050      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x11a>
 80036a4:	2b60      	cmp	r3, #96	; 0x60
 80036a6:	d877      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b50      	cmp	r3, #80	; 0x50
 80036aa:	d03c      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0xfa>
 80036ac:	2b50      	cmp	r3, #80	; 0x50
 80036ae:	d873      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d058      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x13a>
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d86f      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b30      	cmp	r3, #48	; 0x30
 80036ba:	d064      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x15a>
 80036bc:	2b30      	cmp	r3, #48	; 0x30
 80036be:	d86b      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d060      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x15a>
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d867      	bhi.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05c      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x15a>
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d05a      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x15a>
 80036d0:	e062      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f000 f968 	bl	80039b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
      break;
 80036fe:	e04f      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f000 f951 	bl	80039b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003722:	609a      	str	r2, [r3, #8]
      break;
 8003724:	e03c      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f000 f8c8 	bl	80038c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2150      	movs	r1, #80	; 0x50
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f91f 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 8003744:	e02c      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	461a      	mov	r2, r3
 8003754:	f000 f8e6 	bl	8003924 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2160      	movs	r1, #96	; 0x60
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f90f 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 8003764:	e01c      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	461a      	mov	r2, r3
 8003774:	f000 f8a8 	bl	80038c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2140      	movs	r1, #64	; 0x40
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f8ff 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 8003784:	e00c      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f000 f8f6 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 8003796:	e003      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      break;
 800379c:	e000      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800379e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00b      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d007      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <TIM_Base_SetConfig+0xbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_Base_SetConfig+0x30>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <TIM_Base_SetConfig+0xc0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d108      	bne.n	8003846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <TIM_Base_SetConfig+0xbc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <TIM_Base_SetConfig+0xc0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a07      	ldr	r2, [pc, #28]	; (80038bc <TIM_Base_SetConfig+0xb8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d103      	bne.n	80038ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	615a      	str	r2, [r3, #20]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800

080038c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 030a 	bic.w	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0210 	bic.w	r2, r3, #16
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f043 0307 	orr.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	609a      	str	r2, [r3, #8]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e046      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e042      	b.n	8003b6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd fe68 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f82b 	bl	8003b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bae:	f023 030c 	bic.w	r3, r3, #12
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <UART_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d103      	bne.n	8003be4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff fb4a 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	e002      	b.n	8003bea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7ff fb32 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8003be8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <UART_SetConfig+0x118>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	0119      	lsls	r1, r3, #4
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009a      	lsls	r2, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <UART_SetConfig+0x118>)
 8003c22:	fba3 0302 	umull	r0, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2064      	movs	r0, #100	; 0x64
 8003c2a:	fb00 f303 	mul.w	r3, r0, r3
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	3332      	adds	r3, #50	; 0x32
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <UART_SetConfig+0x118>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c40:	4419      	add	r1, r3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <UART_SetConfig+0x118>)
 8003c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2064      	movs	r0, #100	; 0x64
 8003c62:	fb00 f303 	mul.w	r3, r0, r3
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	3332      	adds	r3, #50	; 0x32
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <UART_SetConfig+0x118>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000030 	.word	0x20000030

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	4d0c      	ldr	r5, [pc, #48]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 fcac 	bl	8004608 <_init>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	; (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	080046f8 	.word	0x080046f8
 8003cd8:	080046f8 	.word	0x080046f8
 8003cdc:	080046f8 	.word	0x080046f8
 8003ce0:	080046fc 	.word	0x080046fc

08003ce4 <malloc>:
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <malloc+0xc>)
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f000 b87b 	b.w	8003de4 <_malloc_r>
 8003cee:	bf00      	nop
 8003cf0:	20000030 	.word	0x20000030

08003cf4 <free>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <free+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f000 b80b 	b.w	8003d14 <_free_r>
 8003cfe:	bf00      	nop
 8003d00:	20000030 	.word	0x20000030

08003d04 <memset>:
 8003d04:	4603      	mov	r3, r0
 8003d06:	4402      	add	r2, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_free_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4605      	mov	r5, r0
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d040      	beq.n	8003d9e <_free_r+0x8a>
 8003d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d20:	1f0c      	subs	r4, r1, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfb8      	it	lt
 8003d26:	18e4      	addlt	r4, r4, r3
 8003d28:	f000 f900 	bl	8003f2c <__malloc_lock>
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <_free_r+0x8c>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	b933      	cbnz	r3, 8003d40 <_free_r+0x2c>
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	6014      	str	r4, [r2, #0]
 8003d36:	4628      	mov	r0, r5
 8003d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d3c:	f000 b8fc 	b.w	8003f38 <__malloc_unlock>
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	d908      	bls.n	8003d56 <_free_r+0x42>
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	1821      	adds	r1, r4, r0
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	bf01      	itttt	eq
 8003d4c:	6819      	ldreq	r1, [r3, #0]
 8003d4e:	685b      	ldreq	r3, [r3, #4]
 8003d50:	1809      	addeq	r1, r1, r0
 8003d52:	6021      	streq	r1, [r4, #0]
 8003d54:	e7ed      	b.n	8003d32 <_free_r+0x1e>
 8003d56:	461a      	mov	r2, r3
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	b10b      	cbz	r3, 8003d60 <_free_r+0x4c>
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d9fa      	bls.n	8003d56 <_free_r+0x42>
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	1850      	adds	r0, r2, r1
 8003d64:	42a0      	cmp	r0, r4
 8003d66:	d10b      	bne.n	8003d80 <_free_r+0x6c>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	4401      	add	r1, r0
 8003d6c:	1850      	adds	r0, r2, r1
 8003d6e:	4283      	cmp	r3, r0
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	d1e0      	bne.n	8003d36 <_free_r+0x22>
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4401      	add	r1, r0
 8003d7a:	6011      	str	r1, [r2, #0]
 8003d7c:	6053      	str	r3, [r2, #4]
 8003d7e:	e7da      	b.n	8003d36 <_free_r+0x22>
 8003d80:	d902      	bls.n	8003d88 <_free_r+0x74>
 8003d82:	230c      	movs	r3, #12
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	e7d6      	b.n	8003d36 <_free_r+0x22>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	1821      	adds	r1, r4, r0
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf01      	itttt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	1809      	addeq	r1, r1, r0
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	6063      	str	r3, [r4, #4]
 8003d9a:	6054      	str	r4, [r2, #4]
 8003d9c:	e7cb      	b.n	8003d36 <_free_r+0x22>
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	200001f8 	.word	0x200001f8

08003da4 <sbrk_aligned>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4e0e      	ldr	r6, [pc, #56]	; (8003de0 <sbrk_aligned+0x3c>)
 8003da8:	460c      	mov	r4, r1
 8003daa:	6831      	ldr	r1, [r6, #0]
 8003dac:	4605      	mov	r5, r0
 8003dae:	b911      	cbnz	r1, 8003db6 <sbrk_aligned+0x12>
 8003db0:	f000 f88c 	bl	8003ecc <_sbrk_r>
 8003db4:	6030      	str	r0, [r6, #0]
 8003db6:	4621      	mov	r1, r4
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 f887 	bl	8003ecc <_sbrk_r>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d00a      	beq.n	8003dd8 <sbrk_aligned+0x34>
 8003dc2:	1cc4      	adds	r4, r0, #3
 8003dc4:	f024 0403 	bic.w	r4, r4, #3
 8003dc8:	42a0      	cmp	r0, r4
 8003dca:	d007      	beq.n	8003ddc <sbrk_aligned+0x38>
 8003dcc:	1a21      	subs	r1, r4, r0
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f000 f87c 	bl	8003ecc <_sbrk_r>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d101      	bne.n	8003ddc <sbrk_aligned+0x38>
 8003dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ddc:	4620      	mov	r0, r4
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	200001fc 	.word	0x200001fc

08003de4 <_malloc_r>:
 8003de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de8:	1ccd      	adds	r5, r1, #3
 8003dea:	f025 0503 	bic.w	r5, r5, #3
 8003dee:	3508      	adds	r5, #8
 8003df0:	2d0c      	cmp	r5, #12
 8003df2:	bf38      	it	cc
 8003df4:	250c      	movcc	r5, #12
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	4607      	mov	r7, r0
 8003dfa:	db01      	blt.n	8003e00 <_malloc_r+0x1c>
 8003dfc:	42a9      	cmp	r1, r5
 8003dfe:	d905      	bls.n	8003e0c <_malloc_r+0x28>
 8003e00:	230c      	movs	r3, #12
 8003e02:	2600      	movs	r6, #0
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4630      	mov	r0, r6
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	4e2e      	ldr	r6, [pc, #184]	; (8003ec8 <_malloc_r+0xe4>)
 8003e0e:	f000 f88d 	bl	8003f2c <__malloc_lock>
 8003e12:	6833      	ldr	r3, [r6, #0]
 8003e14:	461c      	mov	r4, r3
 8003e16:	bb34      	cbnz	r4, 8003e66 <_malloc_r+0x82>
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff ffc2 	bl	8003da4 <sbrk_aligned>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	4604      	mov	r4, r0
 8003e24:	d14d      	bne.n	8003ec2 <_malloc_r+0xde>
 8003e26:	6834      	ldr	r4, [r6, #0]
 8003e28:	4626      	mov	r6, r4
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	d140      	bne.n	8003eb0 <_malloc_r+0xcc>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	4631      	mov	r1, r6
 8003e32:	4638      	mov	r0, r7
 8003e34:	eb04 0803 	add.w	r8, r4, r3
 8003e38:	f000 f848 	bl	8003ecc <_sbrk_r>
 8003e3c:	4580      	cmp	r8, r0
 8003e3e:	d13a      	bne.n	8003eb6 <_malloc_r+0xd2>
 8003e40:	6821      	ldr	r1, [r4, #0]
 8003e42:	3503      	adds	r5, #3
 8003e44:	1a6d      	subs	r5, r5, r1
 8003e46:	f025 0503 	bic.w	r5, r5, #3
 8003e4a:	3508      	adds	r5, #8
 8003e4c:	2d0c      	cmp	r5, #12
 8003e4e:	bf38      	it	cc
 8003e50:	250c      	movcc	r5, #12
 8003e52:	4638      	mov	r0, r7
 8003e54:	4629      	mov	r1, r5
 8003e56:	f7ff ffa5 	bl	8003da4 <sbrk_aligned>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d02b      	beq.n	8003eb6 <_malloc_r+0xd2>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	442b      	add	r3, r5
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	e00e      	b.n	8003e84 <_malloc_r+0xa0>
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	1b52      	subs	r2, r2, r5
 8003e6a:	d41e      	bmi.n	8003eaa <_malloc_r+0xc6>
 8003e6c:	2a0b      	cmp	r2, #11
 8003e6e:	d916      	bls.n	8003e9e <_malloc_r+0xba>
 8003e70:	1961      	adds	r1, r4, r5
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	6025      	str	r5, [r4, #0]
 8003e76:	bf18      	it	ne
 8003e78:	6059      	strne	r1, [r3, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	bf08      	it	eq
 8003e7e:	6031      	streq	r1, [r6, #0]
 8003e80:	5162      	str	r2, [r4, r5]
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	4638      	mov	r0, r7
 8003e86:	f104 060b 	add.w	r6, r4, #11
 8003e8a:	f000 f855 	bl	8003f38 <__malloc_unlock>
 8003e8e:	f026 0607 	bic.w	r6, r6, #7
 8003e92:	1d23      	adds	r3, r4, #4
 8003e94:	1af2      	subs	r2, r6, r3
 8003e96:	d0b6      	beq.n	8003e06 <_malloc_r+0x22>
 8003e98:	1b9b      	subs	r3, r3, r6
 8003e9a:	50a3      	str	r3, [r4, r2]
 8003e9c:	e7b3      	b.n	8003e06 <_malloc_r+0x22>
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	bf0c      	ite	eq
 8003ea4:	6032      	streq	r2, [r6, #0]
 8003ea6:	605a      	strne	r2, [r3, #4]
 8003ea8:	e7ec      	b.n	8003e84 <_malloc_r+0xa0>
 8003eaa:	4623      	mov	r3, r4
 8003eac:	6864      	ldr	r4, [r4, #4]
 8003eae:	e7b2      	b.n	8003e16 <_malloc_r+0x32>
 8003eb0:	4634      	mov	r4, r6
 8003eb2:	6876      	ldr	r6, [r6, #4]
 8003eb4:	e7b9      	b.n	8003e2a <_malloc_r+0x46>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	4638      	mov	r0, r7
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	f000 f83c 	bl	8003f38 <__malloc_unlock>
 8003ec0:	e7a1      	b.n	8003e06 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7de      	b.n	8003e84 <_malloc_r+0xa0>
 8003ec6:	bf00      	nop
 8003ec8:	200001f8 	.word	0x200001f8

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4d05      	ldr	r5, [pc, #20]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fd fcea 	bl	80018b0 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000200 	.word	0x20000200

08003eec <siprintf>:
 8003eec:	b40e      	push	{r1, r2, r3}
 8003eee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ef2:	b500      	push	{lr}
 8003ef4:	b09c      	sub	sp, #112	; 0x70
 8003ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef8:	9002      	str	r0, [sp, #8]
 8003efa:	9006      	str	r0, [sp, #24]
 8003efc:	9107      	str	r1, [sp, #28]
 8003efe:	9104      	str	r1, [sp, #16]
 8003f00:	4808      	ldr	r0, [pc, #32]	; (8003f24 <siprintf+0x38>)
 8003f02:	4909      	ldr	r1, [pc, #36]	; (8003f28 <siprintf+0x3c>)
 8003f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f08:	9105      	str	r1, [sp, #20]
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	a902      	add	r1, sp, #8
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	f000 f874 	bl	8003ffc <_svfiprintf_r>
 8003f14:	2200      	movs	r2, #0
 8003f16:	9b02      	ldr	r3, [sp, #8]
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	b01c      	add	sp, #112	; 0x70
 8003f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f20:	b003      	add	sp, #12
 8003f22:	4770      	bx	lr
 8003f24:	20000030 	.word	0x20000030
 8003f28:	ffff0208 	.word	0xffff0208

08003f2c <__malloc_lock>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	; (8003f34 <__malloc_lock+0x8>)
 8003f2e:	f000 bafb 	b.w	8004528 <__retarget_lock_acquire_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000204 	.word	0x20000204

08003f38 <__malloc_unlock>:
 8003f38:	4801      	ldr	r0, [pc, #4]	; (8003f40 <__malloc_unlock+0x8>)
 8003f3a:	f000 baf6 	b.w	800452a <__retarget_lock_release_recursive>
 8003f3e:	bf00      	nop
 8003f40:	20000204 	.word	0x20000204

08003f44 <__ssputs_r>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	688e      	ldr	r6, [r1, #8]
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	429e      	cmp	r6, r3
 8003f4e:	460c      	mov	r4, r1
 8003f50:	4690      	mov	r8, r2
 8003f52:	461f      	mov	r7, r3
 8003f54:	d838      	bhi.n	8003fc8 <__ssputs_r+0x84>
 8003f56:	898a      	ldrh	r2, [r1, #12]
 8003f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f5c:	d032      	beq.n	8003fc4 <__ssputs_r+0x80>
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	6909      	ldr	r1, [r1, #16]
 8003f62:	3301      	adds	r3, #1
 8003f64:	eba5 0901 	sub.w	r9, r5, r1
 8003f68:	6965      	ldr	r5, [r4, #20]
 8003f6a:	444b      	add	r3, r9
 8003f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	429d      	cmp	r5, r3
 8003f78:	bf38      	it	cc
 8003f7a:	461d      	movcc	r5, r3
 8003f7c:	0553      	lsls	r3, r2, #21
 8003f7e:	d531      	bpl.n	8003fe4 <__ssputs_r+0xa0>
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7ff ff2f 	bl	8003de4 <_malloc_r>
 8003f86:	4606      	mov	r6, r0
 8003f88:	b950      	cbnz	r0, 8003fa0 <__ssputs_r+0x5c>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f8ca 3000 	str.w	r3, [sl]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	464a      	mov	r2, r9
 8003fa2:	6921      	ldr	r1, [r4, #16]
 8003fa4:	f000 fad0 	bl	8004548 <memcpy>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6126      	str	r6, [r4, #16]
 8003fb6:	444e      	add	r6, r9
 8003fb8:	6026      	str	r6, [r4, #0]
 8003fba:	463e      	mov	r6, r7
 8003fbc:	6165      	str	r5, [r4, #20]
 8003fbe:	eba5 0509 	sub.w	r5, r5, r9
 8003fc2:	60a5      	str	r5, [r4, #8]
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	d900      	bls.n	8003fca <__ssputs_r+0x86>
 8003fc8:	463e      	mov	r6, r7
 8003fca:	4632      	mov	r2, r6
 8003fcc:	4641      	mov	r1, r8
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	f000 fac8 	bl	8004564 <memmove>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	1b9b      	subs	r3, r3, r6
 8003fda:	60a3      	str	r3, [r4, #8]
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	4433      	add	r3, r6
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	e7db      	b.n	8003f9c <__ssputs_r+0x58>
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	f000 fad7 	bl	8004598 <_realloc_r>
 8003fea:	4606      	mov	r6, r0
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1e1      	bne.n	8003fb4 <__ssputs_r+0x70>
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	6921      	ldr	r1, [r4, #16]
 8003ff4:	f7ff fe8e 	bl	8003d14 <_free_r>
 8003ff8:	e7c7      	b.n	8003f8a <__ssputs_r+0x46>
	...

08003ffc <_svfiprintf_r>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	4698      	mov	r8, r3
 8004002:	898b      	ldrh	r3, [r1, #12]
 8004004:	4607      	mov	r7, r0
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	460d      	mov	r5, r1
 800400a:	4614      	mov	r4, r2
 800400c:	b09d      	sub	sp, #116	; 0x74
 800400e:	d50e      	bpl.n	800402e <_svfiprintf_r+0x32>
 8004010:	690b      	ldr	r3, [r1, #16]
 8004012:	b963      	cbnz	r3, 800402e <_svfiprintf_r+0x32>
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	f7ff fee5 	bl	8003de4 <_malloc_r>
 800401a:	6028      	str	r0, [r5, #0]
 800401c:	6128      	str	r0, [r5, #16]
 800401e:	b920      	cbnz	r0, 800402a <_svfiprintf_r+0x2e>
 8004020:	230c      	movs	r3, #12
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e0d1      	b.n	80041ce <_svfiprintf_r+0x1d2>
 800402a:	2340      	movs	r3, #64	; 0x40
 800402c:	616b      	str	r3, [r5, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	9309      	str	r3, [sp, #36]	; 0x24
 8004032:	2320      	movs	r3, #32
 8004034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004038:	2330      	movs	r3, #48	; 0x30
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041e8 <_svfiprintf_r+0x1ec>
 8004046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800404a:	4623      	mov	r3, r4
 800404c:	469a      	mov	sl, r3
 800404e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004052:	b10a      	cbz	r2, 8004058 <_svfiprintf_r+0x5c>
 8004054:	2a25      	cmp	r2, #37	; 0x25
 8004056:	d1f9      	bne.n	800404c <_svfiprintf_r+0x50>
 8004058:	ebba 0b04 	subs.w	fp, sl, r4
 800405c:	d00b      	beq.n	8004076 <_svfiprintf_r+0x7a>
 800405e:	465b      	mov	r3, fp
 8004060:	4622      	mov	r2, r4
 8004062:	4629      	mov	r1, r5
 8004064:	4638      	mov	r0, r7
 8004066:	f7ff ff6d 	bl	8003f44 <__ssputs_r>
 800406a:	3001      	adds	r0, #1
 800406c:	f000 80aa 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004072:	445a      	add	r2, fp
 8004074:	9209      	str	r2, [sp, #36]	; 0x24
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a2 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004080:	2300      	movs	r3, #0
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
 8004086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408a:	f10a 0a01 	add.w	sl, sl, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	9307      	str	r3, [sp, #28]
 8004092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004096:	931a      	str	r3, [sp, #104]	; 0x68
 8004098:	4654      	mov	r4, sl
 800409a:	2205      	movs	r2, #5
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	4851      	ldr	r0, [pc, #324]	; (80041e8 <_svfiprintf_r+0x1ec>)
 80040a2:	f000 fa43 	bl	800452c <memchr>
 80040a6:	9a04      	ldr	r2, [sp, #16]
 80040a8:	b9d8      	cbnz	r0, 80040e2 <_svfiprintf_r+0xe6>
 80040aa:	06d0      	lsls	r0, r2, #27
 80040ac:	bf44      	itt	mi
 80040ae:	2320      	movmi	r3, #32
 80040b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b4:	0711      	lsls	r1, r2, #28
 80040b6:	bf44      	itt	mi
 80040b8:	232b      	movmi	r3, #43	; 0x2b
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b2a      	cmp	r3, #42	; 0x2a
 80040c4:	d015      	beq.n	80040f2 <_svfiprintf_r+0xf6>
 80040c6:	4654      	mov	r4, sl
 80040c8:	2000      	movs	r0, #0
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	9a07      	ldr	r2, [sp, #28]
 80040d0:	4621      	mov	r1, r4
 80040d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d6:	3b30      	subs	r3, #48	; 0x30
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d94e      	bls.n	800417a <_svfiprintf_r+0x17e>
 80040dc:	b1b0      	cbz	r0, 800410c <_svfiprintf_r+0x110>
 80040de:	9207      	str	r2, [sp, #28]
 80040e0:	e014      	b.n	800410c <_svfiprintf_r+0x110>
 80040e2:	eba0 0308 	sub.w	r3, r0, r8
 80040e6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	46a2      	mov	sl, r4
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	e7d2      	b.n	8004098 <_svfiprintf_r+0x9c>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9103      	str	r1, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfbb      	ittet	lt
 80040fe:	425b      	neglt	r3, r3
 8004100:	f042 0202 	orrlt.w	r2, r2, #2
 8004104:	9307      	strge	r3, [sp, #28]
 8004106:	9307      	strlt	r3, [sp, #28]
 8004108:	bfb8      	it	lt
 800410a:	9204      	strlt	r2, [sp, #16]
 800410c:	7823      	ldrb	r3, [r4, #0]
 800410e:	2b2e      	cmp	r3, #46	; 0x2e
 8004110:	d10c      	bne.n	800412c <_svfiprintf_r+0x130>
 8004112:	7863      	ldrb	r3, [r4, #1]
 8004114:	2b2a      	cmp	r3, #42	; 0x2a
 8004116:	d135      	bne.n	8004184 <_svfiprintf_r+0x188>
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	3402      	adds	r4, #2
 800411c:	1d1a      	adds	r2, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	f04f 33ff 	movlt.w	r3, #4294967295
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80041ec <_svfiprintf_r+0x1f0>
 8004130:	2203      	movs	r2, #3
 8004132:	4650      	mov	r0, sl
 8004134:	7821      	ldrb	r1, [r4, #0]
 8004136:	f000 f9f9 	bl	800452c <memchr>
 800413a:	b140      	cbz	r0, 800414e <_svfiprintf_r+0x152>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	eba0 000a 	sub.w	r0, r0, sl
 8004142:	fa03 f000 	lsl.w	r0, r3, r0
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	3401      	adds	r4, #1
 800414a:	4303      	orrs	r3, r0
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004152:	2206      	movs	r2, #6
 8004154:	4826      	ldr	r0, [pc, #152]	; (80041f0 <_svfiprintf_r+0x1f4>)
 8004156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415a:	f000 f9e7 	bl	800452c <memchr>
 800415e:	2800      	cmp	r0, #0
 8004160:	d038      	beq.n	80041d4 <_svfiprintf_r+0x1d8>
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <_svfiprintf_r+0x1f8>)
 8004164:	bb1b      	cbnz	r3, 80041ae <_svfiprintf_r+0x1b2>
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	3307      	adds	r3, #7
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	3308      	adds	r3, #8
 8004170:	9303      	str	r3, [sp, #12]
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	4433      	add	r3, r6
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	e767      	b.n	800404a <_svfiprintf_r+0x4e>
 800417a:	460c      	mov	r4, r1
 800417c:	2001      	movs	r0, #1
 800417e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004182:	e7a5      	b.n	80040d0 <_svfiprintf_r+0xd4>
 8004184:	2300      	movs	r3, #0
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4619      	mov	r1, r3
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4620      	mov	r0, r4
 8004192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004196:	3a30      	subs	r2, #48	; 0x30
 8004198:	2a09      	cmp	r2, #9
 800419a:	d903      	bls.n	80041a4 <_svfiprintf_r+0x1a8>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0c5      	beq.n	800412c <_svfiprintf_r+0x130>
 80041a0:	9105      	str	r1, [sp, #20]
 80041a2:	e7c3      	b.n	800412c <_svfiprintf_r+0x130>
 80041a4:	4604      	mov	r4, r0
 80041a6:	2301      	movs	r3, #1
 80041a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ac:	e7f0      	b.n	8004190 <_svfiprintf_r+0x194>
 80041ae:	ab03      	add	r3, sp, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	462a      	mov	r2, r5
 80041b4:	4638      	mov	r0, r7
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <_svfiprintf_r+0x1fc>)
 80041b8:	a904      	add	r1, sp, #16
 80041ba:	f3af 8000 	nop.w
 80041be:	1c42      	adds	r2, r0, #1
 80041c0:	4606      	mov	r6, r0
 80041c2:	d1d6      	bne.n	8004172 <_svfiprintf_r+0x176>
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	065b      	lsls	r3, r3, #25
 80041c8:	f53f af2c 	bmi.w	8004024 <_svfiprintf_r+0x28>
 80041cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ce:	b01d      	add	sp, #116	; 0x74
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462a      	mov	r2, r5
 80041da:	4638      	mov	r0, r7
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <_svfiprintf_r+0x1fc>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	f000 f87c 	bl	80042dc <_printf_i>
 80041e4:	e7eb      	b.n	80041be <_svfiprintf_r+0x1c2>
 80041e6:	bf00      	nop
 80041e8:	080046c2 	.word	0x080046c2
 80041ec:	080046c8 	.word	0x080046c8
 80041f0:	080046cc 	.word	0x080046cc
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f45 	.word	0x08003f45

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4699      	mov	r9, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	4607      	mov	r7, r0
 800420a:	4293      	cmp	r3, r2
 800420c:	bfb8      	it	lt
 800420e:	4613      	movlt	r3, r2
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004216:	460c      	mov	r4, r1
 8004218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc28      	bgt.n	8004296 <_printf_common+0x9a>
 8004244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004248:	1e13      	subs	r3, r2, #0
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d42d      	bmi.n	80042b0 <_printf_common+0xb4>
 8004254:	4649      	mov	r1, r9
 8004256:	4638      	mov	r0, r7
 8004258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d020      	beq.n	80042a4 <_printf_common+0xa8>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	68e5      	ldr	r5, [r4, #12]
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf18      	it	ne
 800426e:	2500      	movne	r5, #0
 8004270:	6832      	ldr	r2, [r6, #0]
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	bf08      	it	eq
 800427a:	1aad      	subeq	r5, r5, r2
 800427c:	6922      	ldr	r2, [r4, #16]
 800427e:	bf08      	it	eq
 8004280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004284:	4293      	cmp	r3, r2
 8004286:	bfc4      	itt	gt
 8004288:	1a9b      	subgt	r3, r3, r2
 800428a:	18ed      	addgt	r5, r5, r3
 800428c:	341a      	adds	r4, #26
 800428e:	42b5      	cmp	r5, r6
 8004290:	d11a      	bne.n	80042c8 <_printf_common+0xcc>
 8004292:	2000      	movs	r0, #0
 8004294:	e008      	b.n	80042a8 <_printf_common+0xac>
 8004296:	2301      	movs	r3, #1
 8004298:	4652      	mov	r2, sl
 800429a:	4649      	mov	r1, r9
 800429c:	4638      	mov	r0, r7
 800429e:	47c0      	blx	r8
 80042a0:	3001      	adds	r0, #1
 80042a2:	d103      	bne.n	80042ac <_printf_common+0xb0>
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	3501      	adds	r5, #1
 80042ae:	e7c4      	b.n	800423a <_printf_common+0x3e>
 80042b0:	2030      	movs	r0, #48	; 0x30
 80042b2:	18e1      	adds	r1, r4, r3
 80042b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042be:	4422      	add	r2, r4
 80042c0:	3302      	adds	r3, #2
 80042c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042c6:	e7c5      	b.n	8004254 <_printf_common+0x58>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4622      	mov	r2, r4
 80042cc:	4649      	mov	r1, r9
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c0      	blx	r8
 80042d2:	3001      	adds	r0, #1
 80042d4:	d0e6      	beq.n	80042a4 <_printf_common+0xa8>
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7d9      	b.n	800428e <_printf_common+0x92>
	...

080042dc <_printf_i>:
 80042dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	7e0f      	ldrb	r7, [r1, #24]
 80042e2:	4691      	mov	r9, r2
 80042e4:	2f78      	cmp	r7, #120	; 0x78
 80042e6:	4680      	mov	r8, r0
 80042e8:	460c      	mov	r4, r1
 80042ea:	469a      	mov	sl, r3
 80042ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042f2:	d807      	bhi.n	8004304 <_printf_i+0x28>
 80042f4:	2f62      	cmp	r7, #98	; 0x62
 80042f6:	d80a      	bhi.n	800430e <_printf_i+0x32>
 80042f8:	2f00      	cmp	r7, #0
 80042fa:	f000 80d9 	beq.w	80044b0 <_printf_i+0x1d4>
 80042fe:	2f58      	cmp	r7, #88	; 0x58
 8004300:	f000 80a4 	beq.w	800444c <_printf_i+0x170>
 8004304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800430c:	e03a      	b.n	8004384 <_printf_i+0xa8>
 800430e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004312:	2b15      	cmp	r3, #21
 8004314:	d8f6      	bhi.n	8004304 <_printf_i+0x28>
 8004316:	a101      	add	r1, pc, #4	; (adr r1, 800431c <_printf_i+0x40>)
 8004318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800431c:	08004375 	.word	0x08004375
 8004320:	08004389 	.word	0x08004389
 8004324:	08004305 	.word	0x08004305
 8004328:	08004305 	.word	0x08004305
 800432c:	08004305 	.word	0x08004305
 8004330:	08004305 	.word	0x08004305
 8004334:	08004389 	.word	0x08004389
 8004338:	08004305 	.word	0x08004305
 800433c:	08004305 	.word	0x08004305
 8004340:	08004305 	.word	0x08004305
 8004344:	08004305 	.word	0x08004305
 8004348:	08004497 	.word	0x08004497
 800434c:	080043b9 	.word	0x080043b9
 8004350:	08004479 	.word	0x08004479
 8004354:	08004305 	.word	0x08004305
 8004358:	08004305 	.word	0x08004305
 800435c:	080044b9 	.word	0x080044b9
 8004360:	08004305 	.word	0x08004305
 8004364:	080043b9 	.word	0x080043b9
 8004368:	08004305 	.word	0x08004305
 800436c:	08004305 	.word	0x08004305
 8004370:	08004481 	.word	0x08004481
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	602a      	str	r2, [r5, #0]
 800437c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004384:	2301      	movs	r3, #1
 8004386:	e0a4      	b.n	80044d2 <_printf_i+0x1f6>
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	6829      	ldr	r1, [r5, #0]
 800438c:	0606      	lsls	r6, r0, #24
 800438e:	f101 0304 	add.w	r3, r1, #4
 8004392:	d50a      	bpl.n	80043aa <_printf_i+0xce>
 8004394:	680e      	ldr	r6, [r1, #0]
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	2e00      	cmp	r6, #0
 800439a:	da03      	bge.n	80043a4 <_printf_i+0xc8>
 800439c:	232d      	movs	r3, #45	; 0x2d
 800439e:	4276      	negs	r6, r6
 80043a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a4:	230a      	movs	r3, #10
 80043a6:	485e      	ldr	r0, [pc, #376]	; (8004520 <_printf_i+0x244>)
 80043a8:	e019      	b.n	80043de <_printf_i+0x102>
 80043aa:	680e      	ldr	r6, [r1, #0]
 80043ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043b0:	602b      	str	r3, [r5, #0]
 80043b2:	bf18      	it	ne
 80043b4:	b236      	sxthne	r6, r6
 80043b6:	e7ef      	b.n	8004398 <_printf_i+0xbc>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	1d19      	adds	r1, r3, #4
 80043be:	6029      	str	r1, [r5, #0]
 80043c0:	0601      	lsls	r1, r0, #24
 80043c2:	d501      	bpl.n	80043c8 <_printf_i+0xec>
 80043c4:	681e      	ldr	r6, [r3, #0]
 80043c6:	e002      	b.n	80043ce <_printf_i+0xf2>
 80043c8:	0646      	lsls	r6, r0, #25
 80043ca:	d5fb      	bpl.n	80043c4 <_printf_i+0xe8>
 80043cc:	881e      	ldrh	r6, [r3, #0]
 80043ce:	2f6f      	cmp	r7, #111	; 0x6f
 80043d0:	bf0c      	ite	eq
 80043d2:	2308      	moveq	r3, #8
 80043d4:	230a      	movne	r3, #10
 80043d6:	4852      	ldr	r0, [pc, #328]	; (8004520 <_printf_i+0x244>)
 80043d8:	2100      	movs	r1, #0
 80043da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043de:	6865      	ldr	r5, [r4, #4]
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	bfa8      	it	ge
 80043e4:	6821      	ldrge	r1, [r4, #0]
 80043e6:	60a5      	str	r5, [r4, #8]
 80043e8:	bfa4      	itt	ge
 80043ea:	f021 0104 	bicge.w	r1, r1, #4
 80043ee:	6021      	strge	r1, [r4, #0]
 80043f0:	b90e      	cbnz	r6, 80043f6 <_printf_i+0x11a>
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	d04d      	beq.n	8004492 <_printf_i+0x1b6>
 80043f6:	4615      	mov	r5, r2
 80043f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80043fc:	fb03 6711 	mls	r7, r3, r1, r6
 8004400:	5dc7      	ldrb	r7, [r0, r7]
 8004402:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004406:	4637      	mov	r7, r6
 8004408:	42bb      	cmp	r3, r7
 800440a:	460e      	mov	r6, r1
 800440c:	d9f4      	bls.n	80043f8 <_printf_i+0x11c>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d10b      	bne.n	800442a <_printf_i+0x14e>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07de      	lsls	r6, r3, #31
 8004416:	d508      	bpl.n	800442a <_printf_i+0x14e>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	6861      	ldr	r1, [r4, #4]
 800441c:	4299      	cmp	r1, r3
 800441e:	bfde      	ittt	le
 8004420:	2330      	movle	r3, #48	; 0x30
 8004422:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004426:	f105 35ff 	addle.w	r5, r5, #4294967295
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	6122      	str	r2, [r4, #16]
 800442e:	464b      	mov	r3, r9
 8004430:	4621      	mov	r1, r4
 8004432:	4640      	mov	r0, r8
 8004434:	f8cd a000 	str.w	sl, [sp]
 8004438:	aa03      	add	r2, sp, #12
 800443a:	f7ff fedf 	bl	80041fc <_printf_common>
 800443e:	3001      	adds	r0, #1
 8004440:	d14c      	bne.n	80044dc <_printf_i+0x200>
 8004442:	f04f 30ff 	mov.w	r0, #4294967295
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	4834      	ldr	r0, [pc, #208]	; (8004520 <_printf_i+0x244>)
 800444e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004452:	6829      	ldr	r1, [r5, #0]
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f851 6b04 	ldr.w	r6, [r1], #4
 800445a:	6029      	str	r1, [r5, #0]
 800445c:	061d      	lsls	r5, r3, #24
 800445e:	d514      	bpl.n	800448a <_printf_i+0x1ae>
 8004460:	07df      	lsls	r7, r3, #31
 8004462:	bf44      	itt	mi
 8004464:	f043 0320 	orrmi.w	r3, r3, #32
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b91e      	cbnz	r6, 8004474 <_printf_i+0x198>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	2310      	movs	r3, #16
 8004476:	e7af      	b.n	80043d8 <_printf_i+0xfc>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f043 0320 	orr.w	r3, r3, #32
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	2378      	movs	r3, #120	; 0x78
 8004482:	4828      	ldr	r0, [pc, #160]	; (8004524 <_printf_i+0x248>)
 8004484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004488:	e7e3      	b.n	8004452 <_printf_i+0x176>
 800448a:	0659      	lsls	r1, r3, #25
 800448c:	bf48      	it	mi
 800448e:	b2b6      	uxthmi	r6, r6
 8004490:	e7e6      	b.n	8004460 <_printf_i+0x184>
 8004492:	4615      	mov	r5, r2
 8004494:	e7bb      	b.n	800440e <_printf_i+0x132>
 8004496:	682b      	ldr	r3, [r5, #0]
 8004498:	6826      	ldr	r6, [r4, #0]
 800449a:	1d18      	adds	r0, r3, #4
 800449c:	6961      	ldr	r1, [r4, #20]
 800449e:	6028      	str	r0, [r5, #0]
 80044a0:	0635      	lsls	r5, r6, #24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	d501      	bpl.n	80044aa <_printf_i+0x1ce>
 80044a6:	6019      	str	r1, [r3, #0]
 80044a8:	e002      	b.n	80044b0 <_printf_i+0x1d4>
 80044aa:	0670      	lsls	r0, r6, #25
 80044ac:	d5fb      	bpl.n	80044a6 <_printf_i+0x1ca>
 80044ae:	8019      	strh	r1, [r3, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	4615      	mov	r5, r2
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	e7ba      	b.n	800442e <_printf_i+0x152>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	2100      	movs	r1, #0
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	602a      	str	r2, [r5, #0]
 80044c0:	681d      	ldr	r5, [r3, #0]
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f831 	bl	800452c <memchr>
 80044ca:	b108      	cbz	r0, 80044d0 <_printf_i+0x1f4>
 80044cc:	1b40      	subs	r0, r0, r5
 80044ce:	6060      	str	r0, [r4, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	e7a8      	b.n	800442e <_printf_i+0x152>
 80044dc:	462a      	mov	r2, r5
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0ab      	beq.n	8004442 <_printf_i+0x166>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	079b      	lsls	r3, r3, #30
 80044ee:	d413      	bmi.n	8004518 <_printf_i+0x23c>
 80044f0:	68e0      	ldr	r0, [r4, #12]
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	4298      	cmp	r0, r3
 80044f6:	bfb8      	it	lt
 80044f8:	4618      	movlt	r0, r3
 80044fa:	e7a4      	b.n	8004446 <_printf_i+0x16a>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4632      	mov	r2, r6
 8004500:	4649      	mov	r1, r9
 8004502:	4640      	mov	r0, r8
 8004504:	47d0      	blx	sl
 8004506:	3001      	adds	r0, #1
 8004508:	d09b      	beq.n	8004442 <_printf_i+0x166>
 800450a:	3501      	adds	r5, #1
 800450c:	68e3      	ldr	r3, [r4, #12]
 800450e:	9903      	ldr	r1, [sp, #12]
 8004510:	1a5b      	subs	r3, r3, r1
 8004512:	42ab      	cmp	r3, r5
 8004514:	dcf2      	bgt.n	80044fc <_printf_i+0x220>
 8004516:	e7eb      	b.n	80044f0 <_printf_i+0x214>
 8004518:	2500      	movs	r5, #0
 800451a:	f104 0619 	add.w	r6, r4, #25
 800451e:	e7f5      	b.n	800450c <_printf_i+0x230>
 8004520:	080046d3 	.word	0x080046d3
 8004524:	080046e4 	.word	0x080046e4

08004528 <__retarget_lock_acquire_recursive>:
 8004528:	4770      	bx	lr

0800452a <__retarget_lock_release_recursive>:
 800452a:	4770      	bx	lr

0800452c <memchr>:
 800452c:	4603      	mov	r3, r0
 800452e:	b510      	push	{r4, lr}
 8004530:	b2c9      	uxtb	r1, r1
 8004532:	4402      	add	r2, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	4618      	mov	r0, r3
 8004538:	d101      	bne.n	800453e <memchr+0x12>
 800453a:	2000      	movs	r0, #0
 800453c:	e003      	b.n	8004546 <memchr+0x1a>
 800453e:	7804      	ldrb	r4, [r0, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	428c      	cmp	r4, r1
 8004544:	d1f6      	bne.n	8004534 <memchr+0x8>
 8004546:	bd10      	pop	{r4, pc}

08004548 <memcpy>:
 8004548:	440a      	add	r2, r1
 800454a:	4291      	cmp	r1, r2
 800454c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004550:	d100      	bne.n	8004554 <memcpy+0xc>
 8004552:	4770      	bx	lr
 8004554:	b510      	push	{r4, lr}
 8004556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800455a:	4291      	cmp	r1, r2
 800455c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004560:	d1f9      	bne.n	8004556 <memcpy+0xe>
 8004562:	bd10      	pop	{r4, pc}

08004564 <memmove>:
 8004564:	4288      	cmp	r0, r1
 8004566:	b510      	push	{r4, lr}
 8004568:	eb01 0402 	add.w	r4, r1, r2
 800456c:	d902      	bls.n	8004574 <memmove+0x10>
 800456e:	4284      	cmp	r4, r0
 8004570:	4623      	mov	r3, r4
 8004572:	d807      	bhi.n	8004584 <memmove+0x20>
 8004574:	1e43      	subs	r3, r0, #1
 8004576:	42a1      	cmp	r1, r4
 8004578:	d008      	beq.n	800458c <memmove+0x28>
 800457a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800457e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004582:	e7f8      	b.n	8004576 <memmove+0x12>
 8004584:	4601      	mov	r1, r0
 8004586:	4402      	add	r2, r0
 8004588:	428a      	cmp	r2, r1
 800458a:	d100      	bne.n	800458e <memmove+0x2a>
 800458c:	bd10      	pop	{r4, pc}
 800458e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004596:	e7f7      	b.n	8004588 <memmove+0x24>

08004598 <_realloc_r>:
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	4680      	mov	r8, r0
 800459e:	4614      	mov	r4, r2
 80045a0:	460e      	mov	r6, r1
 80045a2:	b921      	cbnz	r1, 80045ae <_realloc_r+0x16>
 80045a4:	4611      	mov	r1, r2
 80045a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045aa:	f7ff bc1b 	b.w	8003de4 <_malloc_r>
 80045ae:	b92a      	cbnz	r2, 80045bc <_realloc_r+0x24>
 80045b0:	f7ff fbb0 	bl	8003d14 <_free_r>
 80045b4:	4625      	mov	r5, r4
 80045b6:	4628      	mov	r0, r5
 80045b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045bc:	f000 f81b 	bl	80045f6 <_malloc_usable_size_r>
 80045c0:	4284      	cmp	r4, r0
 80045c2:	4607      	mov	r7, r0
 80045c4:	d802      	bhi.n	80045cc <_realloc_r+0x34>
 80045c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ca:	d812      	bhi.n	80045f2 <_realloc_r+0x5a>
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f7ff fc08 	bl	8003de4 <_malloc_r>
 80045d4:	4605      	mov	r5, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0ed      	beq.n	80045b6 <_realloc_r+0x1e>
 80045da:	42bc      	cmp	r4, r7
 80045dc:	4622      	mov	r2, r4
 80045de:	4631      	mov	r1, r6
 80045e0:	bf28      	it	cs
 80045e2:	463a      	movcs	r2, r7
 80045e4:	f7ff ffb0 	bl	8004548 <memcpy>
 80045e8:	4631      	mov	r1, r6
 80045ea:	4640      	mov	r0, r8
 80045ec:	f7ff fb92 	bl	8003d14 <_free_r>
 80045f0:	e7e1      	b.n	80045b6 <_realloc_r+0x1e>
 80045f2:	4635      	mov	r5, r6
 80045f4:	e7df      	b.n	80045b6 <_realloc_r+0x1e>

080045f6 <_malloc_usable_size_r>:
 80045f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fa:	1f18      	subs	r0, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bfbc      	itt	lt
 8004600:	580b      	ldrlt	r3, [r1, r0]
 8004602:	18c0      	addlt	r0, r0, r3
 8004604:	4770      	bx	lr
	...

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
